<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Semon0x29a</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Semon0x29a.github.io/"/>
  <updated>2020-02-13T13:49:05.195Z</updated>
  <id>http://Semon0x29a.github.io/</id>
  
  <author>
    <name>Semon0x29a</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Feb.13th</title>
    <link href="http://Semon0x29a.github.io/2020/02/13/20200213/"/>
    <id>http://Semon0x29a.github.io/2020/02/13/20200213/</id>
    <published>2020-02-12T16:27:22.000Z</published>
    <updated>2020-02-13T13:49:05.195Z</updated>
    
    <content type="html"><![CDATA[<p>人生巅峰hhh，看看明天起床后是不是全fst了<del>(你以为你cf过了6题)</del>。<br><img src="\image\20200213.png" alt="Educational Round 82"></p><hr><p>早知道上大号了，差9分上Master。<br><img src="\image\20200213_2.png" alt="Educational Round 82 _"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人生巅峰hhh，看看明天起床后是不是全fst了&lt;del&gt;(你以为你cf过了6题)&lt;/del&gt;。&lt;br&gt;&lt;img src=&quot;\image\20200213.png&quot; alt=&quot;Educational Round 82&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;早知道上大号了，差9分上Mas
      
    
    </summary>
    
      <category term="JustWannaSpeakSth" scheme="http://Semon0x29a.github.io/categories/JustWannaSpeakSth/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 546 E</title>
    <link href="http://Semon0x29a.github.io/2019/03/13/CF546E/"/>
    <id>http://Semon0x29a.github.io/2019/03/13/CF546E/</id>
    <published>2019-03-13T15:06:33.000Z</published>
    <updated>2019-03-13T15:24:17.129Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1136/problem/E" target="_blank" rel="noopener">link</a></p><a id="more"></a><p>首先，根据$ a_{i} + k_{i} \leq a_{i+1} $和$ a_{i+1} + k_{i+1} \leq a_{i+2} $有$ a_{i} \leq a_{i+1} - k_{i} \leq a_{i+2} - k_{i} - k_{i+1} $，依据此规律可以构造一个array $b$，其中$ b_1 = a_1, \space b_{i} = a_{i} - \sum_{j=1}^{i-1} k_{j} $</p><p>那么问题就变得简单了。</p><p>对array $b$，用线段树进行维护。</p><p>对于操作1，二分找到最后一个值小于$ b_{i} + x $的元素$ b_{j} $，将$ b_{i}, b_{i+1}, …, b{j} $修改为$ b_{i} + x $。<br>对于操作2，答案即为$ \sum_{i=l}^{r} \sum_{j=1}^{i-1} k_{j} + \sum_{i=l}^{r} b_{i}$。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  ll v, lazy;</span><br><span class="line">  <span class="keyword">bool</span> cov;</span><br><span class="line">  Node() &#123; v = lazy = <span class="number">0</span>; cov = <span class="literal">false</span>; &#125;</span><br><span class="line">&#125; T[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ll a[maxn], k[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">    T[i].v = a[l];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  build(i &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">  build(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  T[i].v = T[i &lt;&lt; <span class="number">1</span>].v + T[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T[i].cov) &#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>, ls = (m - l + <span class="number">1</span>), rs = (r - m);</span><br><span class="line">    T[i &lt;&lt; <span class="number">1</span>].v = T[i].lazy * ls;</span><br><span class="line">    T[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v = T[i].lazy * rs;</span><br><span class="line">    T[i &lt;&lt; <span class="number">1</span>].lazy = T[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy = T[i].lazy;</span><br><span class="line">    T[i &lt;&lt; <span class="number">1</span>].cov = T[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cov = <span class="literal">true</span>;</span><br><span class="line">    T[i].cov = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, ll x, <span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L &gt; R || l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    T[i].v = (r - l + <span class="number">1</span>) * x;</span><br><span class="line">    T[i].lazy = x, T[i].cov = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pushdown(i, l, r);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (R &lt;= mid) modify(L, R, x, i &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (mid &lt; L) modify(L, R, x, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    modify(L, R, x, i &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    modify(L, R, x, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  &#125;</span><br><span class="line">  T[i].v = T[i &lt;&lt; <span class="number">1</span>].v + T[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    <span class="keyword">return</span> T[i].v;</span><br><span class="line">  &#125;</span><br><span class="line">  pushdown(i, l, r);</span><br><span class="line">  <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">if</span> (R &lt;= mid) <span class="keyword">return</span> query(L, R, i &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (mid &lt; L) <span class="keyword">return</span> query(L, R, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> query(L, R, i &lt;&lt; <span class="number">1</span>, l, mid) + query(L, R, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k[i], k[i] += k[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    a[i] -= k[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    k[i] += k[i - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">int</span> q; <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">  <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">    <span class="keyword">char</span> opt; <span class="built_in">cin</span> &gt;&gt; opt;</span><br><span class="line">    <span class="keyword">if</span> (opt == <span class="string">'+'</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> p, x; <span class="built_in">cin</span> &gt;&gt; p &gt;&gt; x;</span><br><span class="line">      ll v = query(p, p, <span class="number">1</span>, <span class="number">1</span>, n) + x;</span><br><span class="line">      <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = r | (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        <span class="keyword">if</span> (pos &gt; n || pos == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (query(pos, pos, <span class="number">1</span>, <span class="number">1</span>, n) &lt; v) &#123;</span><br><span class="line">          r |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      modify(p, r, v, <span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> l, r; <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; query(l, r, <span class="number">1</span>, <span class="number">1</span>, n) + k[r] - k[l - <span class="number">1</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1136/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Feb.23rd</title>
    <link href="http://Semon0x29a.github.io/2019/02/23/190223/"/>
    <id>http://Semon0x29a.github.io/2019/02/23/190223/</id>
    <published>2019-02-23T13:30:40.000Z</published>
    <updated>2019-02-23T13:32:55.003Z</updated>
    
    <content type="html"><![CDATA[<p><em>真的become Candidate Master了</em></p><p><img src="\image\190223pic.png" alt="pic"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;真的become Candidate Master了&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;\image\190223pic.png&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="JustWannaSpeakSth" scheme="http://Semon0x29a.github.io/categories/JustWannaSpeakSth/"/>
    
    
  </entry>
  
  <entry>
    <title>差分约束系统</title>
    <link href="http://Semon0x29a.github.io/2019/01/21/ChaFenYueShu/"/>
    <id>http://Semon0x29a.github.io/2019/01/21/ChaFenYueShu/</id>
    <published>2019-01-21T11:37:12.000Z</published>
    <updated>2020-08-22T07:45:48.764Z</updated>
    
    <content type="html"><![CDATA[<p>这篇东西瞎写的，作用为防忘，只有一些百度一大把的内容。</p><a id="more"></a><h2 id="定义-wiki"><a href="#定义-wiki" class="headerlink" title="定义(wiki)"></a>定义(<a href="https://zh.wikipedia.org/wiki/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">wiki</a>)</h2><p>差分约束系统（System of Difference Constraints），是求解关于一组变数的特殊不等式组之方法。</p><p>如果一个系统由 $n$ 个变量和 $m$ 个约束条件组成，其中每个约束条件形如 $\displaystyle x_{j}-x_{i}\leq b_{k}(i,j\in [1,n],k\in [1,m])$,则称其为差分约束系统。亦即，差分约束系统是求解关于一组变量的特殊不等式组的方法。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>求解可转化为单源最短路径问题（有向）。</p><p>首先，最短路径等价于求解一组$d_i, 1 \leq i \leq n$，使得图中任意一条有向边满足$d_v \leq d_u + w_{u,v}$，其中$u$、$v$、$w_{u,v}$分别为该有向边的起点、终点、边权。</p><p>显然，$d_v \leq d_u + w_{u,v}$可转化为$d_v - d_u \leq w_{u,v}$，此时不等式形式与$x_j - x_i \leq b_k$相同。</p><p>因此，以每个变量$x_i$为结点，对于约束条件$x_j - x_i \leq b_k$，连接一条有向边$&lt;i,j&gt;$，边权为$b_k$。再加入超级源$s$，与每个结点$i$连一条有向边$&lt;s,i&gt;$，边权为$0$。对此图跑一遍Bellman-Ford，所得的$d_i$即为一组可行解。</p><h2 id="区间约束"><a href="#区间约束" class="headerlink" title="区间约束"></a>区间约束</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>给定一组区间$[l_i, r_i]$，以及一组数$c_i$，求一组点集$S$，使得任一区间$[l_i, r_i]$中均有至少$c_i$个点被选中，且该点集大小$|S|$最小。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>定义$d_i$为区间$[0, d_i]$上被选中的点的数量，对于给定的$[l_i, r_i]$、$c_i$，有：</p><p>$$ d_{r_i} - d_{l_i - 1} \geq c_i $$</p><p>变形为：</p><p>$$ d_{l_i - 1} - d_{r_i} \leq -{c_i} $$</p><p>而对于任一$d_i$，有：</p><p>$$ 0 \leq d_i - d_{i-1} \leq 1 $$</p><p>即：</p><p>$$ d_i - d_{i-1} \leq 1 $$<br>$$ d_{i-1} - d_i \leq 0 $$</p><p>模型构造完成。</p><h3 id="例题连接"><a href="#例题连接" class="headerlink" title="例题连接"></a>例题连接</h3><p><a href="https://cn.vjudge.net/problem/POJ-1201#author=634579757" target="_blank" rel="noopener">POJ-1201</a><br><a href="https://cn.vjudge.net/solution/17876394" target="_blank" rel="noopener">Solution</a></p><h2 id="线性约束"><a href="#线性约束" class="headerlink" title="线性约束"></a>线性约束</h2><h3 id="Statement-1"><a href="#Statement-1" class="headerlink" title="Statement"></a>Statement</h3><p>$n$个人编号为$1$~$n$，且按照编号顺序排成直线，任意两人位置不重合。<br>给定$p$组约束条件$(a_i, b_i, c_i)$，表示$a_i$与$b_i$之间距离不能大于$c_i$。<br>给定$q$组约束条件$(a_j, b_j, c_j)$，表示$a_j$与$b_j$之间距离不能小于$c_j$。<br>若排列方案存在，输出$1$与$n$之间的最长可能距离。若不存在，输出$-1$。若无限长，输出$-2$。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>定义$d_i$为$i$所在位置，则对于第一种约束条件，有:</p><p>$$ d_{b_i} - d_{a_i} \leq c_i $$</p><p>对于第二种约束条件，有：</p><p>$$ d_{b_i} - d_{a_i} \geq c_i \space =&gt; \space d_{a_i} - d_{b_i} \leq -c_i $$</p><p>此处均默认$a_i &lt; b_i$，若$a_i &gt; b_i$，需将二者交换。</p><p>另外，根据题目描述，有：</p><p>$$ d_i - d_{i-1} \geq 1 \space =&gt; \space d_{i-1} - d_i \leq -1 $$</p><p>模型构建完成。</p><p>若存在负环，则不存在方案。若无法到达$n$，则两者距离可能无限长。否则最长距离即$1$到$n$的最短路长度。</p><h3 id="例题链接"><a href="#例题链接" class="headerlink" title="例题链接"></a>例题链接</h3><p><a href="https://cn.vjudge.net/problem/POJ-2983" target="_blank" rel="noopener">POJ-2983</a><br><a href="https://cn.vjudge.net/solution/17875319" target="_blank" rel="noopener">Solution</a></p><h2 id="对于恒等式"><a href="#对于恒等式" class="headerlink" title="对于恒等式"></a>对于恒等式</h2><p>对于形如$x_j - x_i = b_k$的等式，可以分解为$x_j - x_i \leq b_k$与$x_j - x_i \geq b_k$，就ojbk了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇东西瞎写的，作用为防忘，只有一些百度一大把的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="tutorial" scheme="http://Semon0x29a.github.io/categories/tutorial/"/>
    
    
  </entry>
  
  <entry>
    <title>2017-2018 ACM-ICPC Latin American Regional Programming Contest</title>
    <link href="http://Semon0x29a.github.io/2018/11/01/Gym101889/"/>
    <id>http://Semon0x29a.github.io/2018/11/01/Gym101889/</id>
    <published>2018-11-01T05:02:21.000Z</published>
    <updated>2018-11-01T07:45:48.813Z</updated>
    
    <content type="html"><![CDATA[<p>UnrealWings, 2018/10/31 16:00</p><a id="more"></a><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="C-Complete-Naebbirac’s-sequence"><a href="#C-Complete-Naebbirac’s-sequence" class="headerlink" title="C - Complete Naebbirac’s sequence"></a>C - Complete Naebbirac’s sequence</h2><h3 id="Solution-of-C"><a href="#Solution-of-C" class="headerlink" title="Solution of C"></a>Solution of C</h3><p>暴力枚举即可。</p><h3 id="Code-of-C"><a href="#Code-of-C" class="headerlink" title="Code of C"></a>Code of C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line">    <span class="keyword">clock_t</span> st = clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    solve();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    <span class="keyword">clock_t</span> ed = clock();</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; (ed - st) * <span class="number">1.0</span> / CLOCKS_PER_SEC &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; k &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cnt[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((n + <span class="number">1</span>) % k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = (n + <span class="number">1</span>) / k, count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[i] == num) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[i] != num) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"+"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((n - <span class="number">1</span>) &gt; <span class="number">0</span> &amp;&amp; (n - <span class="number">1</span>) % k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = (n - <span class="number">1</span>) / k, count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[i] == num) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[i] != num) &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n % k == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = n / k, count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[i] == num) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == k - <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> sub = <span class="number">-1</span>, add = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[i] == num - <span class="number">1</span>) add = i;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (cnt[i] == num + <span class="number">1</span>) sub = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span> &lt;&lt; sub &lt;&lt; <span class="string">" +"</span> &lt;&lt; add &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">goto</span> ed;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ed:;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Enigma"><a href="#E-Enigma" class="headerlink" title="E - Enigma"></a>E - Enigma</h2><h3 id="Solution-of-E"><a href="#Solution-of-E" class="headerlink" title="Solution of E"></a>Solution of E</h3><p>记忆化搜索，vis[u][status] 表示枚举前u位、余数为status的状态是否visited。</p><h3 id="Code-of-E"><a href="#Code-of-E" class="headerlink" title="Code of E"></a>Code of E</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) a.begin(), a.end()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">int</span> &amp; x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">long</span> <span class="keyword">long</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">double</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">char</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">char</span> *x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%s"</span>, x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> _R(pair&lt;T, U&gt; &amp;x) &#123; <span class="keyword">return</span> _R(x.first) &amp;&amp; _R(x.second); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Read</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Read</span><span class="params">(T &amp;head, U &amp;... tail)</span> </span>&#123; <span class="keyword">return</span> _R(head) &amp;&amp; Read(tail...); &#125; </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%lld"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">double</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%.10f"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">char</span> &amp;x) &#123; <span class="built_in">putchar</span>(x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">char</span> *x) &#123; <span class="built_in">printf</span>(<span class="string">"%s"</span>, x); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> pair&lt;T, U&gt; &amp;x) &#123; _W(x.first); <span class="built_in">putchar</span>(<span class="string">' '</span>); _W(x.second); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;x) &#123; <span class="keyword">for</span> (<span class="keyword">auto</span> i = x.begin(); i != x.end(); _W(*i++)) &#123; <span class="keyword">if</span> (i != x.begin()) &#123; <span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">const</span> T &amp;head, <span class="keyword">const</span> U &amp;... tail)</span> </span>&#123; _W(head); <span class="built_in">putchar</span>(<span class="keyword">sizeof</span>...(tail) ? <span class="string">' '</span> : <span class="string">'\n'</span>); Write(tail...); &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">2</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,&#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">1</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">-1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> debug(...) Write(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> debug(...) 2333</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line">    <span class="keyword">clock_t</span> START = clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    solve();</span><br><span class="line">    debug((clock() - START) * <span class="number">1.0</span> / CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(ll a)</span> </span>&#123; <span class="keyword">return</span> a * a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll a, ll b)</span> </span>&#123; a += b; <span class="keyword">return</span> (a &gt;= MOD) ? (a - MOD) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sub</span><span class="params">(ll a, ll b)</span> </span>&#123; a -= b; <span class="keyword">return</span> (a &lt; <span class="number">0</span>) ? (a + MOD) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a, ll b)</span> </span>&#123; a *= b; <span class="keyword">if</span> (a &gt;= MOD) a = a - a / MOD * MOD; <span class="keyword">return</span> a; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll a, ll t)</span> </span>&#123; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t &gt; <span class="number">0</span>; t &gt;&gt;= <span class="number">1</span>, a *= a) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) b *= a; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll t)</span> </span>&#123; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t &gt; <span class="number">0</span>; t &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) b = mul(b, a); <span class="keyword">return</span> b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ******************************************************************************************************************************</span></span><br><span class="line"><span class="comment">// ******************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == s.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> !status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vis[u][status]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    vis[u][status] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> l = u == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>, r = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">if</span> (s[u] != <span class="string">'?'</span>) l = r = s[u] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DFS(u + <span class="number">1</span>, (status * <span class="number">10</span> + i) % n)) &#123;</span><br><span class="line">            res.push_back(i);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; n) &#123;</span><br><span class="line">        res.clear();</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="literal">false</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">if</span> (!DFS(<span class="number">0</span>, <span class="number">0</span>)) <span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            reverse(res.begin(), res.end());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : res) <span class="built_in">cout</span> &lt;&lt; x; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Fundrasing"><a href="#F-Fundrasing" class="headerlink" title="F - Fundrasing"></a>F - Fundrasing</h2><h3 id="Solution-of-F"><a href="#Solution-of-F" class="headerlink" title="Solution of F"></a>Solution of F</h3><p>先把数据按b从小到大排，按f从大到小排。然后把b、f均相同的项合并，离散化f，就可以用树状数组优化dp了。</p><h3 id="Code-of-F"><a href="#Code-of-F" class="headerlink" title="Code of F"></a>Code of F</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line">    <span class="keyword">clock_t</span> st = clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    solve();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    <span class="keyword">clock_t</span> ed = clock();</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; (ed - st) * <span class="number">1.0</span> / CLOCKS_PER_SEC &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> b, f;</span><br><span class="line">    ll d;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Node&amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b &lt; x.b || (b == x.b &amp;&amp; f &gt; x.f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">uniq</span> :</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123; sort(begin(), end()); erase(unique(begin(), end()), end()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> lower_bound(begin(), end(), x) - begin(); &#125;</span><br><span class="line">&#125;uni;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IT</span> &#123;</span></span><br><span class="line">    ll a[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> i, ll x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; maxn; i += (i &amp; (-i))) &#123;</span><br><span class="line">            a[i] = max(a[i], x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        ll ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= (i &amp; (-i))) &#123;</span><br><span class="line">            ret = max(ret, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Node a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        uni.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i].b &gt;&gt; a[i].f &gt;&gt; a[i].d;</span><br><span class="line">            uni.push_back(a[i].f);</span><br><span class="line">        &#125;</span><br><span class="line">        uni.solve();</span><br><span class="line">        sort(a, a + n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i].b == a[j].b &amp;&amp; a[i].f == a[j].f) a[j].d += a[i].d;</span><br><span class="line">            <span class="keyword">else</span> a[++j] = a[i];</span><br><span class="line">            m = j;</span><br><span class="line">        &#125;</span><br><span class="line">        n = m + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        it.init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = uni.getid(a[i].f) + <span class="number">1</span>;</span><br><span class="line">            it.upd(pos, it.query(pos - <span class="number">1</span>) + a[i].d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it.query(uni.size()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Imperial-roads-4-unsolve"><a href="#I-Imperial-roads-4-unsolve" class="headerlink" title="I - Imperial roads(-4, unsolve)"></a>I - Imperial roads(-4, unsolve)</h2><h3 id="Solution-of-I-temp"><a href="#Solution-of-I-temp" class="headerlink" title="Solution of I(temp)"></a>Solution of I(temp)</h3><p>先构造MST(最小生成树)，然后对于每个询问，判断该边是否在MST上。<br>若在，则$res$为mst的边权和。若不在，将该边加到mst上，此时会构成环，将环上除该边外的最长边去掉即可，$res$即为$SumMST + w - max(环上边权)$</p><h2 id="J-Jumping-frog"><a href="#J-Jumping-frog" class="headerlink" title="J - Jumping frog"></a>J - Jumping frog</h2><h3 id="Solution-of-J"><a href="#Solution-of-J" class="headerlink" title="Solution of J"></a>Solution of J</h3><p>忘记题意了…做法大概是直接枚举= =</p><h3 id="Code-of-J"><a href="#Code-of-J" class="headerlink" title="Code of J"></a>Code of J</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) a.begin(), a.end()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">int</span> &amp; x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">long</span> <span class="keyword">long</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">double</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">char</span> &amp;x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> _R(<span class="keyword">char</span> *x) &#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%s"</span>, x) == <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">bool</span> _R(pair&lt;T, U&gt; &amp;x) &#123; <span class="keyword">return</span> _R(x.first) &amp;&amp; _R(x.second); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Read</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">Read</span><span class="params">(T &amp;head, U &amp;... tail)</span> </span>&#123; <span class="keyword">return</span> _R(head) &amp;&amp; Read(tail...); &#125; </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%lld"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">double</span> &amp;x) &#123; <span class="built_in">printf</span>(<span class="string">"%.10f"</span>, x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">char</span> &amp;x) &#123; <span class="built_in">putchar</span>(x); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="keyword">char</span> *x) &#123; <span class="built_in">printf</span>(<span class="string">"%s"</span>, x); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> pair&lt;T, U&gt; &amp;x) &#123; _W(x.first); <span class="built_in">putchar</span>(<span class="string">' '</span>); _W(x.second); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> <span class="keyword">void</span> _W(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt; &amp;x) &#123; <span class="keyword">for</span> (<span class="keyword">auto</span> i = x.begin(); i != x.end(); _W(*i++)) &#123; <span class="keyword">if</span> (i != x.begin()) &#123; <span class="built_in">putchar</span>(<span class="string">' '</span>); &#125;&#125;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... U&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">const</span> T &amp;head, <span class="keyword">const</span> U &amp;... tail)</span> </span>&#123; _W(head); <span class="built_in">putchar</span>(<span class="keyword">sizeof</span>...(tail) ? <span class="string">' '</span> : <span class="string">'\n'</span>); Write(tail...); &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">2</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,&#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">1</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">-1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> debug(...) Write(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> debug(...) 2333</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line">    <span class="keyword">clock_t</span> START = clock();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    solve();</span><br><span class="line">    debug((clock() - START) * <span class="number">1.0</span> / CLOCKS_PER_SEC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sqr</span><span class="params">(ll a)</span> </span>&#123; <span class="keyword">return</span> a * a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">add</span><span class="params">(ll a, ll b)</span> </span>&#123; a += b; <span class="keyword">return</span> (a &gt;= MOD) ? (a - MOD) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sub</span><span class="params">(ll a, ll b)</span> </span>&#123; a -= b; <span class="keyword">return</span> (a &lt; <span class="number">0</span>) ? (a + MOD) : a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a, ll b)</span> </span>&#123; a *= b; <span class="keyword">if</span> (a &gt;= MOD) a = a - a / MOD * MOD; <span class="keyword">return</span> a; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="function">ll <span class="title">Pow</span><span class="params">(ll a, ll t)</span> </span>&#123; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t &gt; <span class="number">0</span>; t &gt;&gt;= <span class="number">1</span>, a *= a) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) b *= a; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll t)</span> </span>&#123; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t &gt; <span class="number">0</span>; t &gt;&gt;= <span class="number">1</span>, a = mul(a, a)) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) b = mul(b, a); <span class="keyword">return</span> b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ******************************************************************************************************************************</span></span><br><span class="line"><span class="comment">// ******************************************************************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">bool</span> ok[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s) &#123;</span><br><span class="line">        n = s.length();</span><br><span class="line">        <span class="built_in">memset</span>(ok, <span class="literal">false</span>, <span class="keyword">sizeof</span> ok);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= n / i; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s[(j + k * i) % n] != <span class="string">'R'</span>) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                    ok[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ok[__gcd(i, n)]) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UnrealWings, 2018/10/31 16:00&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>ACM-ICPC North America Qualifier Contest 2016</title>
    <link href="http://Semon0x29a.github.io/2018/10/20/NAQC2016/"/>
    <id>http://Semon0x29a.github.io/2018/10/20/NAQC2016/</id>
    <published>2018-10-20T10:05:29.000Z</published>
    <updated>2018-10-20T10:41:19.421Z</updated>
    
    <content type="html"><![CDATA[<p>今天与ConanYu、Sprinkle一起在计蒜客打了<a href="https://www.jisuanke.com/contest/1621?view=challenges" target="_blank" rel="noopener">这一场Replay</a>。</p><a id="more"></a><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="A-A-New-Alphabet-01-32-6"><a href="#A-A-New-Alphabet-01-32-6" class="headerlink" title="A. A New Alphabet(01:32, -6)"></a>A. A New Alphabet(01:32, -6)</h2><h3 id="Solution-of-A"><a href="#Solution-of-A" class="headerlink" title="Solution of A"></a>Solution of A</h3><p>简单模拟，不过中间把`看成了’，WA了好多好多发，ACM不需要视力系列= =</p><h3 id="Code-of-A"><a href="#Code-of-A" class="headerlink" title="Code of A"></a>Code of A</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str[][<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="string">"@"</span>,</span><br><span class="line">    <span class="string">"8"</span>,</span><br><span class="line">    <span class="string">"("</span>,</span><br><span class="line">    <span class="string">"|)"</span>,</span><br><span class="line">    <span class="string">"3"</span>,</span><br><span class="line">    <span class="string">"#"</span>,</span><br><span class="line">    <span class="string">"6"</span>,</span><br><span class="line">    <span class="string">"[-]"</span>,</span><br><span class="line">    <span class="string">"|"</span>,</span><br><span class="line">    <span class="string">"_|"</span>,</span><br><span class="line">    <span class="string">"|&lt;"</span>,</span><br><span class="line">    <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"[]\\/[]"</span>,</span><br><span class="line">    <span class="string">"[]\\[]"</span>,</span><br><span class="line">    <span class="string">"0"</span>,</span><br><span class="line">    <span class="string">"|D"</span>,</span><br><span class="line">    <span class="string">"(,)"</span>,</span><br><span class="line">    <span class="string">"|Z"</span>,</span><br><span class="line">    <span class="string">"$"</span>,</span><br><span class="line">    <span class="string">"\'][\'"</span>,</span><br><span class="line">    <span class="string">"|_|"</span>,</span><br><span class="line">    <span class="string">"\\/"</span>,</span><br><span class="line">    <span class="string">"\\/\\/"</span>,</span><br><span class="line">    <span class="string">"&#125;&#123;"</span>,</span><br><span class="line">    <span class="string">"`/"</span>,</span><br><span class="line">    <span class="string">"2"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> source, dest;</span><br><span class="line">    getline(<span class="built_in">cin</span>, source);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = source.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isalpha</span>(source[i])) &#123;</span><br><span class="line">            dest += source[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(source[i] &gt;= <span class="string">'A'</span> &amp;&amp; source[i] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">                source[i] += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dest += str[source[i] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dest &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Arcade-unsolve"><a href="#B-Arcade-unsolve" class="headerlink" title="B. Arcade!(unsolve)"></a>B. Arcade!(unsolve)</h2><h2 id="C-Big-Truck-02-09"><a href="#C-Big-Truck-02-09" class="headerlink" title="C. Big Truck(02:09)"></a>C. Big Truck(02:09)</h2><h3 id="Solution-of-C"><a href="#Solution-of-C" class="headerlink" title="Solution of C"></a>Solution of C</h3><p>简单的双关键最短路。</p><h3 id="Code-of-C"><a href="#Code-of-C" class="headerlink" title="Code of C"></a>Code of C</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a) a.begin(), a.end()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    solve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmin</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chkmax</span><span class="params">(T &amp;a, T b)</span> </span>&#123; <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="literal">true</span>) : <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, dis, score;</span><br><span class="line">    Node(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>, <span class="keyword">int</span> c = <span class="number">0</span>) : u(a), dis(b), score(c) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Node&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dis == b.dis) <span class="keyword">return</span> score &lt; b.score;</span><br><span class="line">        <span class="keyword">return</span> dis &gt; b.dis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w;</span><br><span class="line">    edge(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>) : v(a), w(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">105</span>], dis[<span class="number">105</span>], score[<span class="number">105</span>], vis[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        G[i].clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(score, <span class="number">0</span>, <span class="keyword">sizeof</span> score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[u].emplace_back(v, w);</span><br><span class="line">    G[v].emplace_back(u, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;Node&gt; Q;</span><br><span class="line">    Q.emplace(<span class="number">1</span>, <span class="number">0</span>, w[<span class="number">1</span>]), dis[<span class="number">1</span>] = <span class="number">0</span>, score[<span class="number">1</span>] = w[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.top().u; Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (u == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> edge&amp; e : G[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[e.v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (chkmin(dis[e.v], dis[u] + e.w)) &#123;</span><br><span class="line">                score[e.v] = score[u] + w[e.v];</span><br><span class="line">                Q.emplace(e.v, dis[e.v], score[e.v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dis[e.v] == dis[u] + e.w &amp;&amp; chkmax(score[e.v], score[u] + w[e.v])) &#123;</span><br><span class="line">                Q.emplace(e.v, dis[e.v], score[e.v]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        addedge(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Dijkstra()) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, dis[n], score[n]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"impossible\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Brackets-unsolve-4"><a href="#D-Brackets-unsolve-4" class="headerlink" title="D. Brackets(unsolve, -4)"></a>D. Brackets(unsolve, -4)</h2><h2 id="E-Dots-and-Boxes-unsolve"><a href="#E-Dots-and-Boxes-unsolve" class="headerlink" title="E. Dots and Boxes(unsolve)"></a>E. Dots and Boxes(unsolve)</h2><h2 id="F-Free-Desserts-unsolve"><a href="#F-Free-Desserts-unsolve" class="headerlink" title="F. Free Desserts(unsolve)"></a>F. Free Desserts(unsolve)</h2><h2 id="G-Inverse-Factorial-00-31-2"><a href="#G-Inverse-Factorial-00-31-2" class="headerlink" title="G. Inverse Factorial(00:31, -2)"></a>G. Inverse Factorial(00:31, -2)</h2><h3 id="Solution-of-G"><a href="#Solution-of-G" class="headerlink" title="Solution of G"></a>Solution of G</h3><p>斯特林公式求阶乘位数，据说斯特林公式在小数据时精确度不够，所以对于位数小于等于13的直接在1~15的阶乘表中找，大于13的用二分+斯特林公式找。</p><h3 id="Code-of-G"><a href="#Code-of-G" class="headerlink" title="Code of G"></a>Code of G</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> e = <span class="built_in">exp</span>(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">floor</span>(<span class="built_in">log10</span>(<span class="number">2</span> * pi * n) * <span class="number">0.5</span> + n * <span class="built_in">log10</span>(n / e) + <span class="number">1</span> + eps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll fac[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">13</span>) &#123;</span><br><span class="line">            ll x = atoll(s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fac[i] == x) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">16</span>, r = <span class="number">230000</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> x = calc(mid);</span><br><span class="line">                <span class="keyword">if</span> (x &gt;= n) r = mid;</span><br><span class="line">                <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Nine-Packs-01-55-1"><a href="#H-Nine-Packs-01-55-1" class="headerlink" title="H. Nine Packs(01:55, -1)"></a>H. Nine Packs(01:55, -1)</h2><h3 id="Solution-of-H"><a href="#Solution-of-H" class="headerlink" title="Solution of H"></a>Solution of H</h3><p>每个物品的价值看作1，即可用01背包求得刚好为某一重量时的最小袋数，需要降序排序消除后效性 <del>(好像其实不用?)</del>。<br>然后在背包内扫一遍取最小即可。</p><h3 id="Code-of-H"><a href="#Code-of-H" class="headerlink" title="Code of H"></a>Code of H</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> v[maxn], w[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + m, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> suma = <span class="number">0</span>, sumb = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) suma += a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) sumb += b[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(v, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> v);</span><br><span class="line">    v[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = suma; j &gt;= a[i]; j--) &#123;</span><br><span class="line">            v[j] = min(v[j], v[j - a[i]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> w);</span><br><span class="line">    w[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = sumb; j &gt;= b[i]; j--) &#123;</span><br><span class="line">            w[j] = min(w[j], w[j - b[i]] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = min(suma, sumb); i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        res = min(res, v[i] + w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">0x3f3f3f3f</span>) <span class="built_in">printf</span>(<span class="string">"impossible\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Primonimo-unsolve"><a href="#I-Primonimo-unsolve" class="headerlink" title="I. Primonimo(unsolve)"></a>I. Primonimo(unsolve)</h2><h2 id="J-Quick-Estimates-00-14"><a href="#J-Quick-Estimates-00-14" class="headerlink" title="J. Quick Estimates(00:14)"></a>J. Quick Estimates(00:14)</h2><h3 id="Solution-of-J"><a href="#Solution-of-J" class="headerlink" title="Solution of J"></a>Solution of J</h3><p>没看题，样例看着像是直接输出位数，然后试了一发就过了= =</p><h3 id="Code-of-J"><a href="#Code-of-J" class="headerlink" title="Code of J"></a>Code of J</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">105</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">strlen</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Robotopia-01-12-1"><a href="#K-Robotopia-01-12-1" class="headerlink" title="K. Robotopia(01:12, -1)"></a>K. Robotopia(01:12, -1)</h2><h3 id="Solution-of-K"><a href="#Solution-of-K" class="headerlink" title="Solution of K"></a>Solution of K</h3><p>显然每种Robot最多只会有10000个，所以直接暴力枚举即可。</p><h3 id="Code-of-K"><a href="#Code-of-K" class="headerlink" title="Code of K"></a>Code of K</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l1, a1, l2, a2, lt, at;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d%d"</span>, &amp;l1, &amp;a1, &amp;l2, &amp;a2, &amp;lt, &amp;at);</span><br><span class="line">        <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; S;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 * i &gt;= lt || a1 * i &gt;= at) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ll = lt - l1 * i, aa = at - a1 * i;</span><br><span class="line">            <span class="keyword">if</span> (ll % l2 == <span class="number">0</span> &amp;&amp; aa % a2 == <span class="number">0</span> &amp;&amp; ll / l2 == aa / a2) &#123;</span><br><span class="line">                S.insert(&#123; i, ll / l2 &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l2 * i &gt;= lt || a2 * i &gt;= at) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> ll = lt - l2 * i, aa = at - a2 * i;</span><br><span class="line">            <span class="keyword">if</span> (ll % l1 == <span class="number">0</span> &amp;&amp; aa % a1 == <span class="number">0</span> &amp;&amp; ll / l1 == aa / a1) &#123;</span><br><span class="line">                S.insert(&#123; ll / l1, i &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (S.size() == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, S.begin()-&gt;first, S.begin()-&gt;second);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"?\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-Unusual-Darts-unsolve"><a href="#L-Unusual-Darts-unsolve" class="headerlink" title="L. Unusual Darts(unsolve)"></a>L. Unusual Darts(unsolve)</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天与ConanYu、Sprinkle一起在计蒜客打了&lt;a href=&quot;https://www.jisuanke.com/contest/1621?view=challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这一场Replay&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>P4016 负载平衡问题</title>
    <link href="http://Semon0x29a.github.io/2018/10/10/P4016/"/>
    <id>http://Semon0x29a.github.io/2018/10/10/P4016/</id>
    <published>2018-10-10T09:26:59.000Z</published>
    <updated>2018-10-10T09:44:25.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h1 id="负载平衡问题"><a href="#负载平衡问题" class="headerlink" title="负载平衡问题"></a>负载平衡问题</h1><p>Time Limit: 1000ms, Memory Limits: 256MB<br>Total Submission: 1.4k, Accepted Submission: 774</p></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>G 公司有$n$个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使$n$个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。</p><a id="more"></a><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第 1 行中有 1 个正整数 $n$，表示有 $n$ 个仓库。</p><p>第 2 行中有 $n$ 个正整数，表示 $n$ 个仓库的库存量。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出最少搬运量。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><pre><code>517 9 14 16 4</code></pre><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><pre><code>11</code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>$$ 1 \leq n \leq 100$$</p><hr><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>显然，最终的仓库库存为所有仓库的初始库存的平均值。</p><p>先建立超级源点与超级汇点。对于每一个初始库存$a_i$大于平均值$ave$的仓库，与超级源连一条边，流量为$a_i - ave$，费用为0。对于每个初始库存$a_i$小于平均值$ave$的仓库，与超级汇连一条边，流量为$ave - a_i$，费用为0。在所有相邻的两仓库间连一条边，流量为infi， 费用为1。然后跑一遍费用流，结果即为$ans$。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, c, next;</span><br><span class="line">    edge(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ww = <span class="number">0</span>, <span class="keyword">int</span> cc = <span class="number">0</span>, <span class="keyword">int</span> nxt = <span class="number">-1</span>) : v(vv), w(ww), c(cc), next(nxt) &#123;&#125;</span><br><span class="line">&#125;G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, head[<span class="number">105</span>], cost[<span class="number">105</span>], inq[<span class="number">105</span>], pre[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    G[tot] = edge(v, w, c, head[u]); head[u] = tot++;</span><br><span class="line">    G[tot] = edge(u, <span class="number">0</span>, -c, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span> pre);</span><br><span class="line">    <span class="built_in">memset</span>(cost, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> cost);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q; Q.push(st), cost[st] = <span class="number">0</span>, inq[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front(); Q.pop(), inq[u] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (u == ed) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = G[i].next) &#123;</span><br><span class="line">            edge &amp;e = G[i];</span><br><span class="line">            <span class="keyword">if</span> (e.w &gt; <span class="number">0</span> &amp;&amp; cost[e.v] &gt; cost[u] + e.c) &#123;</span><br><span class="line">                cost[e.v] = cost[u] + e.c;</span><br><span class="line">                pre[e.v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!inq[e.v]) Q.push(e.v), inq[e.v] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost[ed] != <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">augment</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flow = <span class="number">0x3f3f3f3f</span>, now = ed;</span><br><span class="line">    <span class="keyword">for</span> (; pre[now] != <span class="number">-1</span>; now = G[pre[now] ^ <span class="number">1</span>].v) &#123;</span><br><span class="line">        flow = min(flow, G[pre[now]].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (now = ed; pre[now] != <span class="number">-1</span>; now = G[pre[now] ^ <span class="number">1</span>].v) &#123;</span><br><span class="line">        G[pre[now]].w -= flow, G[pre[now] ^ <span class="number">1</span>].w += flow;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cost[ed] * flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mcmf</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (spfa(st, ed)) &#123;</span><br><span class="line">        res += augment(st, ed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[<span class="number">105</span>], sum = <span class="number">0</span>, ave;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ave = sum / n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] -= ave;</span><br><span class="line"></span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) addedge(<span class="number">0</span>, i, a[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) addedge(i, n + <span class="number">1</span>, -a[i], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nxt = (i == n) ? <span class="number">1</span> : (i + <span class="number">1</span>);</span><br><span class="line">        addedge(i, nxt, INF, <span class="number">1</span>);</span><br><span class="line">        addedge(nxt, i, INF, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mcmf(<span class="number">0</span>, n + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;h1 id=&quot;负载平衡问题&quot;&gt;&lt;a href=&quot;#负载平衡问题&quot; class=&quot;headerlink&quot; title=&quot;负载平衡问题&quot;&gt;&lt;/a&gt;负载平衡问题&lt;/h1&gt;&lt;p&gt;Time Limit: 1000ms, Memory Limits: 256MB&lt;br&gt;Total Submission: 1.4k, Accepted Submission: 774&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;G 公司有$n$个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使$n$个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Nowcoder National Day 4</title>
    <link href="http://Semon0x29a.github.io/2018/10/04/NowcoderNationalDay4/"/>
    <id>http://Semon0x29a.github.io/2018/10/04/NowcoderNationalDay4/</id>
    <published>2018-10-04T11:55:00.000Z</published>
    <updated>2018-10-04T12:26:41.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="牛客国庆集训派对Day4"><a href="#牛客国庆集训派对Day4" class="headerlink" title="牛客国庆集训派对Day4"></a>牛客国庆集训派对Day4</h1><p><a href="https://www.nowcoder.com/acm/contest/204#question" target="_blank" rel="noopener">题目链接</a></p><p>Solved : A、D、G、H、I、J</p><p>unsolve : B、C、E、F</p><a id="more"></a><h2 id="A-深度学习"><a href="#A-深度学习" class="headerlink" title="A.深度学习"></a>A.深度学习</h2><h3 id="Solution-of-A"><a href="#Solution-of-A" class="headerlink" title="Solution of A"></a>Solution of A</h3><p><del>大胆猜测，答案为$n$。然后感觉没什么问题，就交了，就过了。</del> 显然，最优情况下是$n$组各选中一次，故答案为$n$。</p><h3 id="Code-of-A"><a href="#Code-of-A" class="headerlink" title="Code of A"></a>Code of A</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-最小生成树"><a href="#D-最小生成树" class="headerlink" title="D.最小生成树"></a>D.最小生成树</h2><h3 id="Solution-of-D"><a href="#Solution-of-D" class="headerlink" title="Solution of D"></a>Solution of D</h3><p>因为边权为$a_u + a_v$，所以最小生成树即将点权最小的点与其他所有点直接相连得到的树，故答案为$(n - 2) min(a_i) + \sum_{i = 1}^{n} a_i$。</p><h3 id="Code-of-D"><a href="#Code-of-D" class="headerlink" title="Code of D"></a>Code of D</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mn = *min_element(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sum += <span class="number">1l</span>l * (n - <span class="number">2</span>) * mn;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-区间权值"><a href="#G-区间权值" class="headerlink" title="G.区间权值"></a>G.区间权值</h2><h3 id="Solution-of-G"><a href="#Solution-of-G" class="headerlink" title="Solution of G"></a>Solution of G</h3><p>将$f(l, r)$展开，然后化简，得到式子：$\sum_{i = 1}^{n} w_i \cdot (c_n - c_{n - i} - c_{i - 1})$， 其中$c_i = \sum_{j = 1}^{i} b_j$、$b_i = \sum_{j = 1}^{i} a_j$，即b为a的前缀和，c为a的前缀和的前缀和。</p><h3 id="Code-of-G"><a href="#Code-of-G" class="headerlink" title="Code of G"></a>Code of G</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">300005</span>], w[<span class="number">300005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">            (a[i] += a[i - <span class="number">1</span>]) %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            (a[i] += a[i - <span class="number">1</span>]) %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res += w[i] * (a[n] - a[n - i] - a[i - <span class="number">1</span>]) % MOD;</span><br><span class="line">            res %= MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (res + MOD) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-树链博弈"><a href="#H-树链博弈" class="headerlink" title="H.树链博弈"></a>H.树链博弈</h2><h3 id="Solution-of-H"><a href="#Solution-of-H" class="headerlink" title="Solution of H"></a>Solution of H</h3><p>队友说只要存在树上某层的黑色结点数为单数，便是先手必胜，otherwise。</p><h3 id="Code-of-H"><a href="#Code-of-H" class="headerlink" title="Code of H"></a>Code of H</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dep;</span><br><span class="line"><span class="keyword">int</span> color[maxn], cnt[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    dep = max(dep, d);</span><br><span class="line">    cnt[d] += (color[u] == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span>&amp; v : G[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            DFS(v, u, d + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;color[i]);</span><br><span class="line">            G[i].clear(), cnt[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            G[u].push_back(v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        dep = <span class="number">0</span>;</span><br><span class="line">        DFS(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= dep; i++) &#123;</span><br><span class="line">            flag |= (cnt[i] &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">"First\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Second\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-连通块计数"><a href="#I-连通块计数" class="headerlink" title="I.连通块计数"></a>I.连通块计数</h2><h3 id="Solution-of-I"><a href="#Solution-of-I" class="headerlink" title="Solution of I"></a>Solution of I</h3><p>包含根结点的方案数为：$\prod_{i = 1}^{n} (a_i + 1)$</p><p>不包含根结点的方案数为：$\sum_{i = 1}^{n} a_i \cdot (a_i + 1) / 2$</p><h3 id="Code-of-I"><a href="#Code-of-I" class="headerlink" title="Code of I"></a>Code of I</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inv2 = <span class="number">499122177l</span>l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>, mul = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            res += <span class="number">1l</span>l * a[i] * (a[i] + <span class="number">1</span>) % MOD * inv2 % MOD;</span><br><span class="line">            mul = mul * (a[i] + <span class="number">1</span>) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (res + mul) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-寻找复读机"><a href="#J-寻找复读机" class="headerlink" title="J.寻找复读机"></a>J.寻找复读机</h2><h3 id="Solution-of-J"><a href="#Solution-of-J" class="headerlink" title="Solution of J"></a>Solution of J</h3><p>模拟即可，注意不说话的人也可能是复读机。</p><h3 id="Code-of-J"><a href="#Code-of-J" class="headerlink" title="Code of J"></a>Code of J</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> who[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">bool</span> is[<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;who[i], s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) is[i] = <span class="literal">true</span>;</span><br><span class="line">        is[who[<span class="number">1</span>]] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(s[i], s[i - <span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            is[who[i]] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is[i]) &#123;</span><br><span class="line">                ans.push_back(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)ans.size(); i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], i == ans.size() - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;牛客国庆集训派对Day4&quot;&gt;&lt;a href=&quot;#牛客国庆集训派对Day4&quot; class=&quot;headerlink&quot; title=&quot;牛客国庆集训派对Day4&quot;&gt;&lt;/a&gt;牛客国庆集训派对Day4&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/acm/contest/204#question&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Solved : A、D、G、H、I、J&lt;/p&gt;
&lt;p&gt;unsolve : B、C、E、F&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>P2765 魔术球问题</title>
    <link href="http://Semon0x29a.github.io/2018/10/01/p2765/"/>
    <id>http://Semon0x29a.github.io/2018/10/01/p2765/</id>
    <published>2018-10-01T03:16:37.000Z</published>
    <updated>2018-10-01T06:52:13.927Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2765" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>问题描述：</p><p>假设有n$(4 &lt;= n &lt;= 55)$根柱子，现要按下述规则在这n根柱子中依次放入编号为1，2，3，…的球。</p><p>（1）每次只能在某根柱子的最上面放球。</p><p>（2）在同一根柱子中，任何2个相邻球的编号之和为完全平方数。</p><p>试设计一个算法，计算出在n根柱子上最多能放多少个球。例如，在4 根柱子上最多可放11 个球。</p><p>编程任务：</p><p>对于给定的n，计算在n根柱子上最多能放多少个球。</p><a id="more"></a><h2 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h2><p>输入格式：</p><p>第1 行有1个正整数n，表示柱子数。</p><p>输出格式：</p><p>程序运行结束时，将n 根柱子上最多能放的球数以及相应的放置方案输出。文件的第一行是球数。接下来的n行，每行是一根柱子上的球的编号。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><p>输入样例：</p><pre><code>4</code></pre><p>输出样例：</p><pre><code>111 82 7 93 6 104 5 11</code></pre><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>此题据说贪心可做，但因为属于网络流24题，所以还是用网络流来做了<del>(才不是不会贪心做法呢)</del>。<br>洛谷的题解很Nice了，就不抄一遍了。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------head start here---------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb      push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ebemplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl    <span class="meta-string">"\n"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a)  a.begin(),a.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0; i &lt; int(n); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, n) for(int i = int(n) - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i, a, b) for(int i = int(a); i &lt;= int(b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dRep(i, a, b) for (int i = int(a); i &gt;= int(b); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, x) memset(a, x, sizeof a)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="keyword">using</span> VI = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> VL = <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">3</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,&#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">1</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">-1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">sqr</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span> <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll t)</span> </span>&#123; a %= MOD; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>, (a *= a) %= MOD) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) (b *= a) %= MOD; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// -----------------------------head end here-------------------------------------</span></span><br><span class="line"><span class="comment">// -------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">    edge(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ww = <span class="number">0</span>, <span class="keyword">int</span> nxt = <span class="number">-1</span>) : v(vv), w(ww), next(nxt) &#123;&#125;</span><br><span class="line">&#125;G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, head[maxn], level[maxn], cur[maxn], go[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    mst(head, <span class="number">-1</span>), mst(go, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    G[tot] = edge(v, w, head[u]); head[u] = tot++;</span><br><span class="line">    G[tot] = edge(u, <span class="number">0</span>, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mst(level, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    Q.push(<span class="number">0</span>); level[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = G[i].next) &#123;</span><br><span class="line">            edge&amp; e = G[i];</span><br><span class="line">            <span class="keyword">if</span> (level[e.v] == <span class="number">0</span> &amp;&amp; e.w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                level[e.v] = level[u] + <span class="number">1</span>;</span><br><span class="line">                Q.push(e.v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level[maxn - <span class="number">1</span>] != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == maxn - <span class="number">1</span>) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> change = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u]; flow &gt; <span class="number">0</span> &amp;&amp; i != <span class="number">-1</span>; i = G[i].next) &#123;</span><br><span class="line">        edge&amp; e = G[i];</span><br><span class="line">        <span class="keyword">if</span> (level[e.v] == level[u] + <span class="number">1</span> &amp;&amp; e.w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = dfs(e.v, min(flow, e.w));</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (e.v != maxn - <span class="number">1</span>) go[u &gt;&gt; <span class="number">1</span>] = e.v &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            e.w -= tmp, G[i ^ <span class="number">1</span>].w += tmp;</span><br><span class="line">            flow -= tmp, change += tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (bfs()) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> head);</span><br><span class="line">        res += dfs(<span class="number">0</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Semon0x29a</span></span><br><span class="line">    assert(freopen(<span class="string">"Testing.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rt = <span class="number">0</span>, now = <span class="number">0</span>, in[<span class="number">105</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">while</span> (rt &lt;= n) &#123;</span><br><span class="line">            ++now; addedge(<span class="number">0</span>, now &lt;&lt; <span class="number">1</span>, <span class="number">1</span>), addedge(now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, maxn - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(now) + <span class="number">1</span>; i * i &lt; now * <span class="number">2</span>; i++) &#123;</span><br><span class="line">                addedge((i * i - now) &lt;&lt; <span class="number">1</span>, now &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp = Dinic();</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">0</span>) in[++rt] = now;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">bool</span> vis[maxn] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; now - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        Rep(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[in[i]]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> st = in[i]; st != <span class="number">-1</span>; vis[st] = <span class="number">1</span>, st = go[st]) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; st &lt;&lt; <span class="string">" \n"</span>[go[st] == <span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2765&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;假设有n$(4 &amp;lt;= n &amp;lt;= 55)$根柱子，现要按下述规则在这n根柱子中依次放入编号为1，2，3，…的球。&lt;/p&gt;
&lt;p&gt;（1）每次只能在某根柱子的最上面放球。&lt;/p&gt;
&lt;p&gt;（2）在同一根柱子中，任何2个相邻球的编号之和为完全平方数。&lt;/p&gt;
&lt;p&gt;试设计一个算法，计算出在n根柱子上最多能放多少个球。例如，在4 根柱子上最多可放11 个球。&lt;/p&gt;
&lt;p&gt;编程任务：&lt;/p&gt;
&lt;p&gt;对于给定的n，计算在n根柱子上最多能放多少个球。&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>HDU 3466 Proud Merchants</title>
    <link href="http://Semon0x29a.github.io/2018/09/20/HDU3466/"/>
    <id>http://Semon0x29a.github.io/2018/09/20/HDU3466/</id>
    <published>2018-09-20T12:47:04.000Z</published>
    <updated>2018-09-20T13:03:21.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p> Proud Merchants<br>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/65536 K (Java/Others)<br>Total Submission(s): 8292    Accepted Submission(s): 3481 </p></blockquote><p><strong>Problem Description</strong><br>Recently, iSea went to an ancient country. For such a long time, it was the most wealthy and powerful kingdom in the world. As a result, the people in this country are still very proud even if their nation hasn’t been so wealthy any more.<br>The merchants were the most typical, each of them only sold exactly one item, the price was Pi, but they would refuse to make a trade with you if your money were less than Qi, and iSea evaluated every item a value Vi.<br>If he had M units of money, what’s the maximum value iSea could get?</p><a id="more"></a><p><strong>Input</strong><br>There are several test cases in the input.</p><p>Each test case begin with two integers N, M (1 ≤ N ≤ 500, 1 ≤ M ≤ 5000), indicating the items’ number and the initial money.<br>Then N lines follow, each line contains three numbers Pi, Qi and Vi (1 ≤ Pi ≤ Qi ≤ 100, 1 ≤ Vi ≤ 1000), their meaning is in the description.</p><p>The input terminates by end of file marker.</p><p><strong>Output</strong><br>For each test case, output one integer, indicating maximum value iSea could get.</p><p><strong>Sample Input</strong><br>2 10<br>10 15 10<br>5 10 5<br>3 10<br>5 10 5<br>3 5 6<br>2 7 3</p><p><strong>Sample Output</strong><br>5<br>11</p><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3466" target="_blank" rel="noopener">题目链接</a></p><p>题意：</p><p>给定$n$件物品，第$i$件物品价格为$p_i$，且至少需要有$q_i$元才能买，价值为$v_i$。求当有$m$元时能获得的最大价值。</p><p>Solution:</p><p>乍一看就是个普通的01背包，实际上并不是。因为至少需要有$q_i$元才能买某一件物品，所以购买的先后顺序具有后效性。<br>显然，当$p_{1} + q_{2} \leq k &lt; p_{2} + q_{1}$时，先买1号物品还能再买2号物品，但先买2号物品就不能再买1号物品了，即满足$q_{1} - p_{1} &gt; q_{2} - p_{2}$时，应先买1号再买2号。<br>然而我们应按照$q_i - p_i$从小到大排序，引用网上看到的：</p><pre><code>通俗的说：这个dp过程正好是逆向的dp[c-p[i]]是dp[c]的最优子结构。所以在DP的时候我们应该按照M的值从小到大排序。</code></pre><p>排序后直接套01背包即可。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">505</span>], q[<span class="number">505</span>], v[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; q[i] &gt;&gt; v[i], id[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(id + <span class="number">1</span>, id + <span class="number">1</span> + n, [&amp;](<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> q[a] - p[a] &lt; q[b] - p[b];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = id[k], edge = max(p[i], q[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= edge; j--) &#123;</span><br><span class="line">                dp[j] = max(dp[j], dp[j - p[i]] + v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt; Proud Merchants&lt;br&gt;Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 131072/65536 K (Java/Others)&lt;br&gt;Total Submission(s): 8292    Accepted Submission(s): 3481 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;br&gt;Recently, iSea went to an ancient country. For such a long time, it was the most wealthy and powerful kingdom in the world. As a result, the people in this country are still very proud even if their nation hasn’t been so wealthy any more.&lt;br&gt;The merchants were the most typical, each of them only sold exactly one item, the price was Pi, but they would refuse to make a trade with you if your money were less than Qi, and iSea evaluated every item a value Vi.&lt;br&gt;If he had M units of money, what’s the maximum value iSea could get?&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>CCPC 2017 秦皇岛</title>
    <link href="http://Semon0x29a.github.io/2018/09/20/ccpc2017qhd/"/>
    <id>http://Semon0x29a.github.io/2018/09/20/ccpc2017qhd/</id>
    <published>2018-09-20T08:01:12.000Z</published>
    <updated>2018-09-20T08:39:17.089Z</updated>
    
    <content type="html"><![CDATA[<p>No response</p><a id="more"></a><p>C - Crusaders Quest(00:33)</p><p>每次可选择将某一位置的字母or某一段连续的相同的字母del掉，若为后者则可以加1分，del后两段字符串将被链接起来。求最大得分。</p><p>Solution:</p><p>因为三种字母均存在三个，所以只要暴力枚举del的顺序即可。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> seq[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> tot, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp[<span class="number">10</span>], n = <span class="number">0</span>, cnt = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == seq[id]) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (cnt % <span class="number">3</span> == <span class="number">0</span>) res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> cnt = <span class="number">0</span>, tmp[n++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res += gao(tmp, n, id + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'g'</span>) a[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'a'</span>) a[i] = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> a[i] = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        seq[<span class="number">0</span>] = <span class="number">1</span>, seq[<span class="number">1</span>] = <span class="number">2</span>, seq[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ans = max(ans, gao(a, <span class="number">9</span>, <span class="number">0</span>));</span><br><span class="line">        &#125; <span class="keyword">while</span> (next_permutation(seq, seq + <span class="number">3</span>));</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>E - String of CCPC(1:36)</p><p>可以在原串某处插入字母，第$i$次花费$(i - 1)$，所得的value即为最终串内子串CCPC的个数减去总花费。求最大value。</p><p>Solution:</p><p>一开始想岔了，以为可以插入一个字母使得新串中CCPC个数+2，于是总插入次数应不超过2。实际上并不存在那种状态，所以最大插入次数应为1。于是枚举插入位置判断即可。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!add) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">2</span>] == <span class="string">'C'</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'C'</span> &amp;&amp; s[i] == <span class="string">'C'</span> &amp;&amp; (i + <span class="number">2</span> &gt;= n || (s[i + <span class="number">1</span>] != <span class="string">'P'</span> || s[i + <span class="number">2</span>] != <span class="string">'C'</span>))) &#123;</span><br><span class="line">                    add = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">2</span>] == <span class="string">'C'</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'P'</span> &amp;&amp; s[i] == <span class="string">'C'</span> &amp;&amp; (i - <span class="number">3</span> &lt; <span class="number">0</span> || s[i - <span class="number">3</span>] != <span class="string">'C'</span>)) &#123;</span><br><span class="line">                    add = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (s[i - <span class="number">2</span>] == <span class="string">'C'</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'C'</span> &amp;&amp; s[i] == <span class="string">'P'</span> &amp;&amp; (i + <span class="number">1</span> &gt;= n || s[i + <span class="number">1</span>] != <span class="string">'C'</span>)) &#123;</span><br><span class="line">                    add = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i - <span class="number">3</span> &gt;= <span class="number">0</span> &amp;&amp; s[i - <span class="number">3</span>] == <span class="string">'C'</span> &amp;&amp; s[i - <span class="number">2</span>] == <span class="string">'C'</span> &amp;&amp; s[i - <span class="number">1</span>] == <span class="string">'P'</span> &amp;&amp; s[i] == <span class="string">'C'</span>) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans + add &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>L - One-Dimensional Maze(00:13)</p><p>给定一个单向迷宫(?)，当处在两端时可以离开迷宫，否则只能按照所处位置的规则向左或向右走，可以花费1单位使某处规则反向。给定初始位置，问离开迷宫的最小花费。</p><p>Solution:</p><p>温暖的签到题，显然即求$\min(\sum_{i = 2}^{k} [s_i == R], \sum_{i = k}^{n} [s_i == L])$</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'R'</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = cnt; cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">'L'</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; min(ans, cnt) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>M - Safest Buildings(2:01, -3)</p><p>PUBG， 给定初始圈和下一圈的半径，下一圈位置随机但必定在初始圈内，给定$n$座建筑，问被下一圈覆盖的概率最大的建筑是哪些。</p><p>Solution:</p><p>$Dist &lt;= \sqrt{(R - 2 * r)^{2}}$ 的建筑概率最大，其他建筑距离越近概率越大。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">sqr</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dis</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqr(x) + sqr(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, R, r; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; R &gt;&gt; r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x, y; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            a[i] = dis(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> len = sqr(R - <span class="number">2</span> * r);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mn = *min_element(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line">        <span class="keyword">if</span> (mn &lt;= len) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt;= len) &#123;</span><br><span class="line">                    ans.push_back(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)ans.size(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" \n"</span>[i == ans.size() - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mn == a[i]) &#123;</span><br><span class="line">                    ans.push_back(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)ans.size(); i++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" \n"</span>[i == ans.size() - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;No response&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>2017CCPC哈尔滨</title>
    <link href="http://Semon0x29a.github.io/2018/09/18/2017CCPCHEB/"/>
    <id>http://Semon0x29a.github.io/2018/09/18/2017CCPCHEB/</id>
    <published>2018-09-18T07:24:52.000Z</published>
    <updated>2018-09-18T07:30:24.892Z</updated>
    
    <content type="html"><![CDATA[<p>凉凉。</p><a id="more"></a><p><strong>F - Permutation</strong></p><p>构造满足条件的数列。</p><p>打表找规律即可= =</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            a[i] = ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            a[i] = ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>H - A Simple Stone Game</strong></p><p>题意不写了</p><p>枚举质因子暴力算就好。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> contain[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; i++) &#123;</span><br><span class="line">        contain[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        contain[a[i] % x]++;</span><br><span class="line">        sum += a[i] % x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x - <span class="number">1</span>, j = <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; sum &gt; <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (; sum &gt; <span class="number">0</span> &amp;&amp; contain[i]; contain[i]--) &#123;</span><br><span class="line">            res += j;</span><br><span class="line">            sum -= x;</span><br><span class="line">            <span class="keyword">if</span> (sum &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; <span class="number">1l</span>l * i * i &lt;= sum; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum % i == <span class="number">0</span>) &#123;</span><br><span class="line">                res = min(res, calc(i));</span><br><span class="line">                <span class="keyword">while</span> (sum % i == <span class="number">0</span>) sum /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span> &amp;&amp; sum &lt; maxn) res = min(res, calc(sum));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res != <span class="number">0x3f3f3f3f3f3f3f3f</span>) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; sum - *max_element(a + <span class="number">1</span>, a + <span class="number">1</span> + n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;凉凉。&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 510(Div.2)</title>
    <link href="http://Semon0x29a.github.io/2018/09/17/CFR510/"/>
    <id>http://Semon0x29a.github.io/2018/09/17/CFR510/</id>
    <published>2018-09-17T13:21:50.000Z</published>
    <updated>2018-09-17T14:05:13.909Z</updated>
    
    <content type="html"><![CDATA[<p>今天这波大号+49分，感觉还行，另吐槽一波predictor越来越不准了。</p><a id="more"></a><hr><p><strong>A.Benches</strong></p><p>原有$n$张长凳，第$i$张长凳上坐着$a_i$个人，现在又来了$m$个人，问长凳所需容量的最大值和最小值</p><p>显然，这个数据量直接暴力一波就最稳了。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> k; <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">        mx = max(mx, k);</span><br><span class="line">        Q.push(-k);</span><br><span class="line">    &#125;</span><br><span class="line">    mx += m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> top = Q.top(); Q.pop();</span><br><span class="line">        Q.push(top - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        mn = min(mn, Q.top());</span><br><span class="line">        Q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; -mn &lt;&lt; <span class="string">" "</span> &lt;&lt; mx &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>B.Vitamin</strong></p><p>商店有$n$种饮料，每种饮料的价格为$c_i$，含有A、B、C中任意种维生素，Petya需要ABC三种维生素，问达到要求的最小花费or不存在方案。</p><p>简单dp，分别以1b、10b、100b代表A、B、C，将每种饮料的维生素种类状态压缩，于是可得状态转移方程：$dp[i + 1][j | status[i + 1]] = dp[i][j] + c[i], 1 \leq i &lt; n$。最终答案为dp[n][7]。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1005</span>], inc[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">1005</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">10</span>]; <span class="built_in">cin</span> &gt;&gt; v[i] &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">strlen</span>(s) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[j] == <span class="string">'A'</span>) inc[i] |= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">'B'</span>) inc[i] |= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[j] == <span class="string">'C'</span>) inc[i] |= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">            dp[i][j] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">1</span>][inc[<span class="number">1</span>]] = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">            dp[i + <span class="number">1</span>][j] = dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i + <span class="number">1</span>][j | inc[i + <span class="number">1</span>]] &gt; dp[i][j] + v[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j | inc[i + <span class="number">1</span>]] = dp[i][j] + v[i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[n][<span class="number">7</span>] != <span class="number">0x3f3f3f3f3f3f3f3f</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">7</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>C.Array Product</strong></p><p>给定一个有$n$个元素的序列，可以无限次将序列中某两个元素合并替换为他们的乘积，只有一次机会删去某一个元素。需要使序列最终剩下的一个元素最大，输出操作方案。</p><p>Solution:</p><pre><code>1、按小到大顺序使负数两两合并。2、将剩下的非正数两两合并。3、此时应只剩下一个非正数or没有， 若有则将它删去。4、合并所有正数。(注: 显然，这题中只有负数的大小是有用的，可以将正数用1代替。 )</code></pre><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, i;</span><br><span class="line">    Node(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ii = <span class="number">0</span>) : v(vv), i(ii) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Node&amp; b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; b.v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;Node&gt; Q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Q.emplace(a[i], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        Node u1 = Q.top(); Q.pop();</span><br><span class="line">        <span class="keyword">if</span> (Q.empty()) <span class="keyword">break</span>;</span><br><span class="line">        Node u2 = Q.top(); Q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((u1.v &lt; <span class="number">0</span> &amp;&amp; u2.v &lt; <span class="number">0</span>) || (u1.v &gt; <span class="number">0</span> &amp;&amp; u2.v &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            Q.emplace(<span class="number">1</span>, u2.i);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; u1.i &lt;&lt; <span class="string">" "</span> &lt;&lt; u2.i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (u2.v == <span class="number">0</span>) &#123;</span><br><span class="line">            Q.emplace(<span class="number">0</span>, u2.i);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; u1.i &lt;&lt; <span class="string">" "</span> &lt;&lt; u2.i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (u2.v &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Q.emplace(u2);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; u1.i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>D.Petya and Array</strong></p><p>给定一个有$n$个元素的数列和一个整数$t$, 求: $\sum_{l = 1}^{n} \sum_{r = l}^{n} [(\sum_{i = l}^{r} a_i) &lt; t]$</p><p>即求$\sum_{i = 1}^{n} \sum_{j = i}^{n} [prefix_i + t &gt; prefix_j]$, 先离散化前缀和，然后树状数组维护一下就好。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll t, a[maxn], sum[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; maxn; i += (i &amp; (-i))) &#123;</span><br><span class="line">        b[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &gt; <span class="number">0</span>; i -= (i &amp; (-i))) &#123;</span><br><span class="line">        res += b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(sum + <span class="number">1</span>, sum + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> m = unique(sum + <span class="number">1</span>, sum + <span class="number">1</span> + n) - sum - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = lower_bound(sum + <span class="number">1</span>, sum + <span class="number">1</span> + m, a[i]) - sum;</span><br><span class="line">        upd(pos);</span><br><span class="line"></span><br><span class="line">        ll tmp = t + a[i - <span class="number">1</span>];</span><br><span class="line">        pos = lower_bound(sum + <span class="number">1</span>, sum + <span class="number">1</span> + m, tmp) - sum - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        res += query(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天这波大号+49分，感觉还行，另吐槽一波predictor越来越不准了。&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>2017 ICPC Beijing</title>
    <link href="http://Semon0x29a.github.io/2018/09/13/2017Beijing/"/>
    <id>http://Semon0x29a.github.io/2018/09/13/2017Beijing/</id>
    <published>2018-09-13T07:30:01.000Z</published>
    <updated>2018-09-13T08:00:37.818Z</updated>
    
    <content type="html"><![CDATA[<p>达成成就： 铁牌首名。</p><a id="more"></a><hr><p>E - Cats and Fish(00:29)</p><p>签到题， 模拟， 一顿瞎搞就好。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">105</span>], cnt[<span class="number">105</span>], eating[<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m, n, x;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; x) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">            cnt[i] = <span class="number">0</span>; eating[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(c, c + n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eating[j]) &#123;</span><br><span class="line">                    cnt[j]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt[j] = <span class="number">1</span>, eating[j] = <span class="number">1</span>, m--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j] == c[j]) &#123;</span><br><span class="line">                    cnt[j] = <span class="number">0</span>;</span><br><span class="line">                    eating[j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ing = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            ing += eating[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" "</span> &lt;&lt; ing &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>F - Secret Poems(00:52)</p><p>签到题 * 2， 模拟 * 2， 瞎搞就好 * 2, WA了两发导致罚时boom。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">105</span>][<span class="number">105</span>], str[<span class="number">10005</span>], ans[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, k = i; k &gt;= <span class="number">0</span>; j++, k--) &#123;</span><br><span class="line">                    str[cnt++] = s[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = <span class="number">0</span>; k &lt;= i; j--, k++) &#123;</span><br><span class="line">                    str[cnt++] = s[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = (n &amp; <span class="number">1</span>) ^ (i % <span class="number">2</span> == <span class="number">0</span>) ^ <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i, k = n - <span class="number">1</span>; j &lt; n; j++, k--) &#123;</span><br><span class="line">                    str[cnt++] = s[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>, k = i; k &lt; n; j--, k++) &#123;</span><br><span class="line">                    str[cnt++] = s[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str[cnt] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans, <span class="number">0</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">-1</span>; ; ) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                ++j;</span><br><span class="line">                <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line">                ans[i][j] = str[pos++];</span><br><span class="line">            &#125; <span class="keyword">while</span> (j &lt; n - <span class="number">1</span> &amp;&amp; ans[i][j + <span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line">                ans[i][j] = str[pos++];</span><br><span class="line">            &#125; <span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; ans[i + <span class="number">1</span>][j] == <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                --j;</span><br><span class="line">                <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line">                ans[i][j] = str[pos++];</span><br><span class="line">            &#125; <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; ans[i][j - <span class="number">1</span>] == <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                --i;</span><br><span class="line">                <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line">                ans[i][j] = str[pos++];</span><br><span class="line">            &#125; <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; ans[i - <span class="number">1</span>][j] == <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == cnt) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; ans[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>J - Pangu and Stones(Upsolved)</p><p>题意： 需要将所有石子合并成一堆，每次只能合并连续的[L, R]堆，求最小合并费用or不能。</p><p>Solution:</p><p>区间DP，大概就是模版题的升级版。然而我并不会区间DP= =<br>转移方程大概为:<br>$dp[i][j][k] = \min ( dp[i][t][1] + dp[t + 1][j][k - 1] ), i \leq t &lt; j, k != 1$<br>$dp[i][j][1] = \min ( dp[i][j][t] ), l \leq t \leq r$<br>$dp[i][i][0] = 0$</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, L, R;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">105</span>], sum[<span class="number">105</span>], dp[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; L &gt;&gt; R) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = len; k &gt;= <span class="number">2</span>; k--) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> t = i; t &lt; j; t++) &#123;</span><br><span class="line">                        dp[i][j][k] = min(dp[i][j][k], dp[i][t][<span class="number">1</span>] + dp[t + <span class="number">1</span>][j][k - <span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = L; t &lt;= R; t++) &#123;</span><br><span class="line">                    dp[i][j][<span class="number">1</span>] = min(dp[i][j][<span class="number">1</span>], dp[i][j][t] + sum[j] - sum[i - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[<span class="number">1</span>][n][<span class="number">1</span>] != INF) <span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][n][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;达成成就： 铁牌首名。&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>HDU-4734 F(x)</title>
    <link href="http://Semon0x29a.github.io/2018/09/12/HDU-4734/"/>
    <id>http://Semon0x29a.github.io/2018/09/12/HDU-4734/</id>
    <published>2018-09-12T14:14:51.000Z</published>
    <updated>2018-09-13T07:31:50.199Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4734" target="_blank" rel="noopener">题目链接</a></p><blockquote class="blockquote-center"><p><strong>F(x)</strong><br>Time Limit: 1000/500 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 8723    Accepted Submission(s): 3440</p></blockquote><p><strong>Problem Description</strong></p><p>For a decimal number x with n digits ($A^{n}A^{n-1}A^{n-2} … A^{2}A^{1}$), we define its weight as $F(x) = A_n * 2^{n-1} + A_{n-1} * 2^{n-2}+…+ A_2 * 2 + A_1 * 1$. Now you are given two numbers A and B, please calculate how many numbers are there between 0 and B, inclusive, whose weight is no more than F(A).</p><a id="more"></a><p><strong>Input</strong><br>The first line has a number T (T &lt;= 10000) , indicating the number of test cases.<br>For each test case, there are two numbers A and B ($0 &lt;= A,B &lt; 10^9$)</p><p><strong>Output</strong><br>For every case,you should output “Case #t: “ at first, without quotes. The t is the case number starting from 1. Then output the answer.</p><p><strong>Sample Input</strong><br>3<br>0 100<br>1 10<br>5 100</p><p><strong>Sample Output</strong><br>Case #1: 1<br>Case #2: 2<br>Case #3: 13</p><p><strong>题意：</strong></p><p>求$\sum_{ i = 0 }^{ B } [F(i) &lt;= F(A)]$</p><p><strong>Solution:</strong></p><p>一开始我的做法是基于$dp[u][prefix]$的数位dp， 第一维表示当前数位， 第二维表示前部的级数和， 但是数据组数太多，会TLE。<br>于是考虑将第二维倒过来，变为$dp[u][F(A) - prefix]$， 这样就可以复用前面数据计算过的dp数组， 于是$O(Accepted)$</p><p><strong>Code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a, b;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">12</span>][<span class="number">9300</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">bool</span> limits, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (!limits &amp;&amp; dp[u][pre] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[u][pre];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, top = limits ? v[u] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        res += dfs(u - <span class="number">1</span>, limits &amp;&amp; (i == top), pre - i * (<span class="number">1</span> &lt;&lt; u));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limits) dp[u][pre] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; b &gt; <span class="number">0</span>; b /= <span class="number">10</span>) &#123;</span><br><span class="line">        v[n++] = b % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, mul = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        sum += (a % <span class="number">10</span>) * mul;</span><br><span class="line">        mul &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        a /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dfs(n - <span class="number">1</span>, <span class="literal">true</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++Case &lt;&lt; <span class="string">": "</span> &lt;&lt; calc() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=4734&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;&lt;strong&gt;F(x)&lt;/strong&gt;&lt;br&gt;Time Limit: 1000/500 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)&lt;br&gt;Total Submission(s): 8723    Accepted Submission(s): 3440&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For a decimal number x with n digits ($A^{n}A^{n-1}A^{n-2} … A^{2}A^{1}$), we define its weight as $F(x) = A_n * 2^{n-1} + A_{n-1} * 2^{n-2}+…+ A_2 * 2 + A_1 * 1$. Now you are given two numbers A and B, please calculate how many numbers are there between 0 and B, inclusive, whose weight is no more than F(A).&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>P2756 飞行员配对方案问题</title>
    <link href="http://Semon0x29a.github.io/2018/09/11/luoguP2756/"/>
    <id>http://Semon0x29a.github.io/2018/09/11/luoguP2756/</id>
    <published>2018-09-11T13:57:38.000Z</published>
    <updated>2018-09-13T03:46:25.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P2756" target="_blank" rel="noopener">题目链接</a></p><p>题目背景<br>第二次世界大战时期..</p><p>题目描述<br>英国皇家空军从沦陷国征募了大量外籍飞行员。由皇家空军派出的每一架飞机都需要配备在航行技能和语言上能互相配合的2 名飞行员，其中1 名是英国飞行员，另1名是外籍飞行员。在众多的飞行员中，每一名外籍飞行员都可以与其他若干名英国飞行员很好地配合。如何选择配对飞行的飞行员才能使一次派出最多的飞机。对于给定的外籍飞行员与英国飞行员的配合情况，试设计一个算法找出最佳飞行员配对方案，使皇家空军一次能派出最多的飞机。</p><p>对于给定的外籍飞行员与英国飞行员的配合情况，编程找出一个最佳飞行员配对方案，使皇家空军一次能派出最多的飞机。</p><a id="more"></a><p>输入输出格式<br>输入格式：<br>第 1 行有 2 个正整数 m 和 n。n 是皇家空军的飞行员总数(n&lt;100)；m 是外籍飞行员数(m&lt;=n)。外籍飞行员编号为 1~m；英国飞行员编号为 m+1~n。</p><p>接下来每行有 2 个正整数 i 和 j，表示外籍飞行员 i 可以和英国飞行员 j 配合。最后以 2个-1 结束。</p><p>输出格式：<br>第 1 行是最佳飞行员配对方案一次能派出的最多的飞机数 M。接下来 M 行是最佳飞行员配对方案。每行有 2个正整数 i 和 j，表示在最佳飞行员配对方案中，飞行员 i 和飞行员 j 配对。如果所求的最佳飞行员配对方案不存在，则输出‘No Solution!’。</p><p>Solution:</p><pre><code>先在可配合的外籍飞行员与英国飞行员间连边， 流量为1， 新建超级源点， 与外籍飞行员间连边， 流量为1，新建超级汇点， 与英国飞行员间连边， 流量为1， 然后最大流一波搞定。(此题二分图匹配也可做)</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------head start here---------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb      push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp      make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl    <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a)  a.begin(),a.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0; i &lt; int(n); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, n) for(int i = int(n) - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i, a, b) for(int i = int(a); i &lt;= int(b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dRep(i, a, b) for (int i = int(a); i &gt;= int(b); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, x) memset(a, x, sizeof a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="keyword">using</span> VI = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> VL = <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">3</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,&#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">1</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">-1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> a / gcd(a, b) * b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">ll</span> <span class="title">sqr</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span> <span class="keyword">return</span> <span class="number">1l</span>l * x * x; &#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, <span class="keyword">int</span> t)</span> </span>&#123; a %= MOD; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>, (a *= a) %= MOD) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) (b *= a) %= MOD; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// -----------------------------head end here-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, w, next;</span><br><span class="line">    edge(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ww = <span class="number">0</span>, <span class="keyword">int</span> nxt = <span class="number">-1</span>) : v(vv), w(ww), next(nxt) &#123;&#125;</span><br><span class="line">&#125;e[MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">205</span>], level[<span class="number">205</span>], cur[<span class="number">205</span>], link[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(link, <span class="number">-1</span>, <span class="keyword">sizeof</span> link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    e[tot] = edge(v, w, head[u]); head[u] = tot++;</span><br><span class="line">    e[tot] = edge(u, <span class="number">0</span>, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">    <span class="built_in">memset</span>(level, <span class="number">0</span>, <span class="keyword">sizeof</span> level);</span><br><span class="line">    Q.push(st); level[st] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (level[e[i].v] == <span class="number">0</span> &amp;&amp; e[i].w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                level[e[i].v] = level[u] + <span class="number">1</span>;</span><br><span class="line">                Q.push(e[i].v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> level[ed] != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ed, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == ed) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> change = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[u]; flow &gt; <span class="number">0</span> &amp;&amp; i != <span class="number">-1</span>; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (level[e[i].v] == level[u] + <span class="number">1</span> &amp;&amp; e[i].w &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = dfs(e[i].v, ed, min(flow, e[i].w));</span><br><span class="line">            <span class="keyword">if</span> (tmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            link[u] = e[i].v;</span><br><span class="line">            e[i].w -= tmp;</span><br><span class="line">            e[i ^ <span class="number">1</span>].w += tmp;</span><br><span class="line">            change += tmp;</span><br><span class="line">            flow -= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> change;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (bfs(st, ed)) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cur, head, <span class="keyword">sizeof</span> cur);</span><br><span class="line">        res += dfs(st, ed, INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n) &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v) &#123;</span><br><span class="line">            <span class="keyword">if</span> (u == v &amp;&amp; v == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            addedge(u, v, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            addedge(n + m + <span class="number">1</span>, i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n + m; i++) &#123;</span><br><span class="line">            addedge(i, n + m + <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> tot = Dinic(n + m + <span class="number">1</span>, n + m + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tot == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tot &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (link[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; link[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P2756&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目背景&lt;br&gt;第二次世界大战时期..&lt;/p&gt;
&lt;p&gt;题目描述&lt;br&gt;英国皇家空军从沦陷国征募了大量外籍飞行员。由皇家空军派出的每一架飞机都需要配备在航行技能和语言上能互相配合的2 名飞行员，其中1 名是英国飞行员，另1名是外籍飞行员。在众多的飞行员中，每一名外籍飞行员都可以与其他若干名英国飞行员很好地配合。如何选择配对飞行的飞行员才能使一次派出最多的飞机。对于给定的外籍飞行员与英国飞行员的配合情况，试设计一个算法找出最佳飞行员配对方案，使皇家空军一次能派出最多的飞机。&lt;/p&gt;
&lt;p&gt;对于给定的外籍飞行员与英国飞行员的配合情况，编程找出一个最佳飞行员配对方案，使皇家空军一次能派出最多的飞机。&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>Traning - 2017 ICPC 沈阳区域赛</title>
    <link href="http://Semon0x29a.github.io/2018/09/11/2017icpcShenYang/"/>
    <id>http://Semon0x29a.github.io/2018/09/11/2017icpcShenYang/</id>
    <published>2018-09-11T09:23:03.000Z</published>
    <updated>2018-09-14T03:21:43.119Z</updated>
    
    <content type="html"><![CDATA[<p>这波总体还行，四题+罚时大概在铜牌区前部分， <del>G题如果莽几波或许能过，</del> 感觉还是要多刷题才行= =</p><a id="more"></a><hr><p>F - Heron and His Triangle (00:52)</p><p>给定一个n，求一个最小的t满足$t \geq n$且长度为t-1, t, t+1的边组成的三角形面积为整数。</p><p>打了前面一部分表，用BM推出公式后上Java秒了。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader in = <span class="keyword">new</span> InputReader(System.in);</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">        Task solver = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                solver.solve(in, out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(InputReader in, PrintWriter out)</span> </span>&#123;</span><br><span class="line">            BigInteger[] a = <span class="keyword">new</span> BigInteger[<span class="number">200</span>];</span><br><span class="line">            a[<span class="number">0</span>] = BigInteger.valueOf(<span class="number">4</span>);</span><br><span class="line">            a[<span class="number">1</span>] = BigInteger.valueOf(<span class="number">14</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                a[i] = a[i - <span class="number">1</span>].multiply(BigInteger.valueOf(<span class="number">4</span>)).subtract(a[i - <span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> T = in.nextInt();</span><br><span class="line">            <span class="keyword">while</span> ((T--) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                BigInteger n = in.nextBigInteger();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[i].compareTo(n) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        out.println(a[i]);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span> BufferedReader reader;</span><br><span class="line">        <span class="keyword">public</span> StringTokenizer tokenizer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InputReader</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stream), <span class="number">32768</span>);</span><br><span class="line">            tokenizer = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tokenizer == null || !tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tokenizer = <span class="keyword">new</span> StringTokenizer(reader.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>G - Infinite Fraction Path (Upsolved)</p><p>给定n结点的有向图，每个点有一个数字$Di$且仅有一条出边，问从哪个结点出发经过n个点后，路径上数字相连组成的数字最大</p><p>Solution:</p><pre><code>想了好久的贪心都觉得会TLE， 结果一看题解居然是bfs+剪枝过的= =</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------head start here---------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb      push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp      make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(a) (int)a.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl    <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(a)  a.begin(),a.end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0; i &lt; int(n); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, n) for(int i = int(n) - 1; i &gt;= 0; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i, a, b) for(int i = int(a); i &lt;= int(b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dRep(i, a, b) for (int i = int(a); i &gt;= int(b); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, x) memset(a, x, sizeof a)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = pair&lt;ll, ll&gt;;</span><br><span class="line"><span class="keyword">using</span> VI = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> VL = <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">150005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">3</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">0</span>, <span class="number">1</span> &#125;,&#123; <span class="number">0</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">0</span> &#125;,&#123; <span class="number">1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">1</span>, <span class="number">-1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">1</span> &#125;,&#123; <span class="number">-1</span>, <span class="number">-1</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> a / gcd(a, b) * b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">ll</span> <span class="title">sqr</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span> <span class="keyword">return</span> <span class="number">1l</span>l * x * x; &#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, <span class="keyword">int</span> t)</span> </span>&#123; a %= MOD; ll b = <span class="number">1</span>; <span class="keyword">for</span> (; t; t &gt;&gt;= <span class="number">1</span>, (a *= a) %= MOD) <span class="keyword">if</span> (t &amp; <span class="number">1</span>) (b *= a) %= MOD; <span class="keyword">return</span> b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmax</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &lt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">bool</span> <span class="title">chkmin</span>(<span class="title">T</span>&amp; <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span> <span class="keyword">return</span> (a &gt; b) ? (a = b, <span class="number">1</span>) : <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">// -----------------------------head end here-------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[MAX];</span><br><span class="line"><span class="keyword">char</span> ans[MAX];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, step;</span><br><span class="line">    Node(<span class="keyword">int</span> a = <span class="number">0</span>, <span class="keyword">int</span> b = <span class="number">0</span>) : id(a), step(b) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> used[MAX];</span><br><span class="line"><span class="built_in">queue</span>&lt;Node&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">        Node u = Q.front(); Q.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u.step &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[u.id] &lt; ans[u.step]) <span class="keyword">continue</span>;</span><br><span class="line">        chkmax(ans[u.step], s[u.id]);</span><br><span class="line"></span><br><span class="line">        Node v = &#123; (<span class="number">1l</span>l * u.id * u.id + <span class="number">1</span>) % n, u.step + <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (s[v.id] &lt; ans[v.step]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (used[v.id] == v.step) <span class="keyword">continue</span>;</span><br><span class="line">        used[v.id] = v.step;</span><br><span class="line">        Q.push(v);</span><br><span class="line">        chkmax(ans[v.step], s[v.id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main() &#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> mx = <span class="number">-1</span>;</span><br><span class="line">        rep(i, n) &#123;</span><br><span class="line">            chkmax(mx, s[i]);</span><br><span class="line">            ans[i] = <span class="number">0</span>, used[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">        rep(i, n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == mx) &#123;</span><br><span class="line">                Q.emplace(i, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        BFS();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++Case &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        rep(i, n) <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>I - Little Boxes (00:07)</p><p>签到题， 求$a+b+c+d$就好，不过数据刚好爆ull，上了一波Java。(long double 也可过)</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputReader in = <span class="keyword">new</span> InputReader(System.in);</span><br><span class="line">        PrintWriter out = <span class="keyword">new</span> PrintWriter(System.out);</span><br><span class="line">        Task solver = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                solver.solve(in, out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(InputReader in, PrintWriter out)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> T = in.nextInt();</span><br><span class="line">            <span class="keyword">while</span> ((T--) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                BigInteger a = in.nextBigInteger(), b = in.nextBigInteger(), c = in.nextBigInteger(), d = in.nextBigInteger();</span><br><span class="line">                out.println(a.add(b).add(c).add(d));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputReader</span> &#123;</span></span><br><span class="line">        <span class="keyword">public</span> BufferedReader reader;</span><br><span class="line">        <span class="keyword">public</span> StringTokenizer tokenizer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InputReader</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stream), <span class="number">32768</span>);</span><br><span class="line">            tokenizer = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (tokenizer == null || !tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    tokenizer = <span class="keyword">new</span> StringTokenizer(reader.readLine());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tokenizer.nextToken();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">nextLong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">nextDouble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BigInteger <span class="title">nextBigInteger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">nextBigDecimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>K - Rabbit (00:32)</p><p>有n只兔子，最外侧的兔子可以跳到任意两只其他兔子中间(不能重合)， 问最多能跳多少次。</p><p>显然最优策略是全部往左跳or全部往右跳，两者取最优即可</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res1 = <span class="number">0</span>, res2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res1 += a[i + <span class="number">1</span>] - a[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            res2 += a[i + <span class="number">1</span>] - a[i] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; max(res1, res2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>L - Tree (01:43)</p><p>给定一棵有n个结点的树，你可以把任一结点染成给定的k种颜色中的任意一种，设$Ei$为使所有颜色为i的结点相连的最小边集，求最大的$E1 \bigcap E2 \bigcap … \bigcap Ek$的size</p><p>Solution:</p><pre><code>只要使所有子树大小大于等于k的结点相连，所使用的边集即为所求。(代码写得有点丑，看网上题解的dfs很流畅的样子。)</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[MAX];</span><br><span class="line"><span class="keyword">int</span> deg[MAX], cnt[MAX], vis[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            e[i].clear(); deg[i] = cnt[i] = vis[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v; <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            e[u].push_back(v);</span><br><span class="line">            e[v].push_back(u);</span><br><span class="line">            deg[u]++, deg[v]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (deg[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                Q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            cnt[u]++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)e[u].size(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (deg[e[u][i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    deg[u]--; deg[e[u][i]]--; cnt[e[u][i]] += cnt[u];</span><br><span class="line">                    <span class="keyword">if</span> (deg[e[u][i]] == <span class="number">1</span>) &#123;</span><br><span class="line">                        Q.push(e[u][i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[i] &gt;= k) &#123;</span><br><span class="line">                Q.push(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)e[u].size(); i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> v = e[u][i];</span><br><span class="line">                <span class="keyword">if</span> (!vis[v] &amp;&amp; cnt[v] &gt;= k) &#123;</span><br><span class="line">                    Q.push(v), ++res;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>M - Wandering Robots(Upsolved)</p><p>n * n的棋盘上有一个机器人，初始在(0, 0)处，每秒都会等概率地往四周完好的格子移动or不动，问机器人最终在一个满足$x + y \geq n - 1$的格子(x, y)上的概率</p><p>Solution:</p><pre><code>棋盘四角的格子权值置为3， 四条边界上的格子置为4， 中间的置为5， 然后将坏格子的权值置为0，它四周的格子权值减1(若大于0)， 然后将符合条件的格子权值加起来，除以整个棋盘的权值和就可以了。</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">"\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Move[][<span class="number">2</span>] = &#123; &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">angle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == n - <span class="number">1</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == n - <span class="number">1</span> &amp;&amp; y == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">border</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == n - <span class="number">1</span> || y == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k; <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">        Map.clear();</span><br><span class="line">        <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">            <span class="keyword">int</span> x, y; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            Map[&#123; x, y &#125;] += <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">if</span> (angle(x, y, n)) Map[&#123; x, y &#125;] = min(Map[&#123; x, y &#125;], <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (border(x, y, n)) Map[&#123; x, y &#125;] = min(Map[&#123; x, y &#125;], <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">else</span> Map[&#123; x, y &#125;] = min(Map[&#123; x, y &#125;], <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> xx = x + Move[i][<span class="number">0</span>], yy = y + Move[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (xx &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; yy &lt; n) &#123;</span><br><span class="line">                    Map[&#123; xx, yy &#125;]++;</span><br><span class="line">                    <span class="keyword">if</span> (angle(xx, yy, n)) Map[&#123; xx, yy &#125;] = min(Map[&#123; xx, yy &#125;], <span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (border(xx, yy, n)) Map[&#123; xx, yy &#125;] = min(Map[&#123; xx, yy &#125;], <span class="number">4</span>);</span><br><span class="line">                    <span class="keyword">else</span> Map[&#123; xx, yy &#125;] = min(Map[&#123; xx, yy &#125;], <span class="number">5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> up = <span class="number">1l</span>l * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">2</span> * <span class="number">5</span> + <span class="number">9</span> + <span class="number">8l</span>l * (n - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> down = <span class="number">1l</span>l * (n - <span class="number">2</span>) * (n - <span class="number">2</span>) * <span class="number">5</span> + <span class="number">12</span> + <span class="number">16l</span>l * (n - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!Map.empty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i : Map) &#123;</span><br><span class="line">                <span class="keyword">int</span> x, y; tie(x, y) = i.first;</span><br><span class="line">                down -= i.second;</span><br><span class="line">                <span class="keyword">if</span> (x + y &gt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">                    up -= i.second;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> gcd = __gcd(up, down);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; ++Case &lt;&lt; <span class="string">": "</span> &lt;&lt; up / gcd &lt;&lt; <span class="string">"/"</span> &lt;&lt; down / gcd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这波总体还行，四题+罚时大概在铜牌区前部分， &lt;del&gt;G题如果莽几波或许能过，&lt;/del&gt; 感觉还是要多刷题才行= =&lt;/p&gt;
    
    </summary>
    
      <category term="Replay" scheme="http://Semon0x29a.github.io/categories/Replay/"/>
    
    
  </entry>
  
  <entry>
    <title>2018 ICPC XuZhou Online J Maze Designer</title>
    <link href="http://Semon0x29a.github.io/2018/09/10/XuZhouOnlineJ/"/>
    <id>http://Semon0x29a.github.io/2018/09/10/XuZhouOnlineJ/</id>
    <published>2018-09-10T07:19:19.000Z</published>
    <updated>2018-09-13T03:46:41.700Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/31462" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><p>题意不太能说清楚，于是直接上结论吧，代码略丑。</p><p>Solution:</p><pre><code>将squares看作点，相邻两个square之间连一条权值为建墙费用的边，若任意两点间只有唯一路径相连，则该图必然是一棵树， 于是求两点间最短距离即为求两结点在最大生成树上的距离。</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">8e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原图上的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    EDGE(<span class="keyword">int</span> uu = <span class="number">0</span>, <span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ww = <span class="number">0</span>) : u(uu), v(vv), w(ww) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> EDGE&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;E[maxm];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成树上的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, next;</span><br><span class="line">    edge(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> nxt = <span class="number">-1</span>) : v(vv), next(nxt) &#123;&#125;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> totE, tot;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn], dp[maxn][<span class="number">20</span>], maxb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    totE = tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>, dep[i] = <span class="number">0</span>, fa[i] = i;</span><br><span class="line">        <span class="built_in">memset</span>(dp[i], <span class="number">-1</span>, <span class="keyword">sizeof</span> dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEDGE</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    E[totE++] = EDGE(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[tot] = edge(v, head[u]); head[u] = tot++;</span><br><span class="line">    e[tot] = edge(u, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kruskal求最大生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(E, E + totE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totE; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = E[i].u, v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (find(u) != find(v)) &#123;</span><br><span class="line">            fa[fa[v]] = fa[u];</span><br><span class="line">            addedge(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倍增法求LCA</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">    dp[u][<span class="number">0</span>] = pre;</span><br><span class="line">    dep[u] = dep[pre] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].v != pre) &#123;</span><br><span class="line">            DFS(e[i].v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makedp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (maxb = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; maxb) &lt;= n; ++maxb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; maxb; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~dp[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[dp[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123;</span><br><span class="line">        swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = maxb - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[dp[u][j]] &gt;= dep[v]) &#123;</span><br><span class="line">            u = dp[u][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = maxb - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[u][j] != dp[v][j]) &#123;</span><br><span class="line">            u = dp[u][j], v = dp[v][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n1, m; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n1, &amp;m);</span><br><span class="line">    n = n1 * m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">3</span>]; <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'D'</span> &amp;&amp; i + n1 &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + n1, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; i + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'D'</span> &amp;&amp; i + n1 &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + n1, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; i + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kruskal();</span><br><span class="line"></span><br><span class="line">    dep[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    DFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    makedp();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p1, p2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;p1.first, &amp;p1.second, &amp;p2.first, &amp;p2.second);</span><br><span class="line">        <span class="keyword">int</span> u = (p1.first - <span class="number">1</span>) * m + p1.second, v = (p2.first - <span class="number">1</span>) * m + p2.second;</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lca = LCA(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dep[u] + dep[v] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/31462&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Online Contest" scheme="http://Semon0x29a.github.io/categories/Online-Contest/"/>
    
    
  </entry>
  
  <entry>
    <title>HDU-3652 B-number</title>
    <link href="http://Semon0x29a.github.io/2018/09/07/HDU-3652/"/>
    <id>http://Semon0x29a.github.io/2018/09/07/HDU-3652/</id>
    <published>2018-09-07T14:23:43.000Z</published>
    <updated>2018-09-13T03:46:00.860Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3652" target="_blank" rel="noopener">题目链接</a></p><blockquote class="blockquote-center"><p> <strong>B-number</strong><br>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 8748    Accepted Submission(s): 5196 </p></blockquote><p><strong>Problem Description</strong><br>A wqb-number, or B-number for short, is a non-negative integer whose decimal form<br>contains the sub- string “13” and can be divided by 13. For example, 130 and 2613<br>are wqb-numbers, but 143 and 2639 are not. Your task is to calculate how many<br>wqb-numbers from 1 to n for a given integer n.</p><a id="more"></a><p><strong>Input</strong><br>Process till EOF. In each line, there is one positive integer n(1 &lt;= n &lt;= 1000000000).</p><p><strong>Output</strong><br>Print each answer in a single line.</p><p><strong>Sample Input</strong></p><pre><code>131002001000</code></pre><p><strong>Sample Output</strong></p><pre><code>1122</code></pre><p>题意： 求[1, n]中包含字段“13”且被13整除的数的个数</p><p>数位DP， 用pre代表前置状态， pre为0时表示前面没有“13”且前一数位不为1， pre为1时表示前面没有“13”且<br>前一位为1， pre为2时表示前面已有“13”。<br>若当前pre为2，则后续pre均为2。<br>若当前pre为1且当前数位为3， 则下一数位pre为2。<br>若当前pre为0或1且当前数位为1， 则下一数位pre为1<br>其余条件pre为0。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bit[<span class="number">20</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">3</span>][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">bool</span> limits, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == tot) &#123;</span><br><span class="line">        <span class="keyword">return</span> (mod == <span class="number">0</span>) &amp;&amp; (pre == <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limits &amp;&amp; dp[u][pre][mod] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[u][pre][mod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> top = limits ? bit[u] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            res += dfs(u + <span class="number">1</span>, i == <span class="number">1</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                res += dfs(u + <span class="number">1</span>, <span class="number">2</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res += dfs(u + <span class="number">1</span>, i == <span class="number">1</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res += dfs(u + <span class="number">1</span>, <span class="number">2</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limits) dp[u][pre][mod] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        bit[tot++] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(bit, bit + tot);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3652&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt; &lt;strong&gt;B-number&lt;/strong&gt;&lt;br&gt;Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)&lt;br&gt;Total Submission(s): 8748    Accepted Submission(s): 5196 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;br&gt;A wqb-number, or B-number for short, is a non-negative integer whose decimal form&lt;br&gt;contains the sub- string “13” and can be divided by 13. For example, 130 and 2613&lt;br&gt;are wqb-numbers, but 143 and 2639 are not. Your task is to calculate how many&lt;br&gt;wqb-numbers from 1 to n for a given integer n.&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
  <entry>
    <title>POJ-1185 炮兵阵地</title>
    <link href="http://Semon0x29a.github.io/2018/09/07/poj-1185/"/>
    <id>http://Semon0x29a.github.io/2018/09/07/poj-1185/</id>
    <published>2018-09-07T09:56:54.000Z</published>
    <updated>2018-09-13T03:46:20.401Z</updated>
    
    <content type="html"><![CDATA[<p>司令部的将军们打算在N*M的网格地图上部署他们的炮兵部队。一个N*M的地图由N行M列组成，地图的每一格可能是山地（用”H” 表示），也可能是平原（用”P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：</p><p><img src="https://odzkskevi.qnssl.com/ba1d4fa736b99550a7ee43784c287df9?v=1535812253" alt=""></p><p>如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。<br>现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。</p><p><a href="http://poj.org/problem?id=1185" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><p>Input<br>第一行包含两个由空格分割开的正整数，分别表示N和M；<br>接下来的N行，每一行含有连续的M个字符(‘P’或者’H’)，中间没有空格。按顺序表示地图中每一行的数据。N &lt;= 100；M &lt;= 10。</p><p>Output<br>仅一行，包含一个整数K，表示最多能摆放的炮兵部队的数量。</p><p>Sample Input<br>5 4<br>PHPP<br>PPHH<br>PPPP<br>PHPP<br>PHHP</p><p>Sample Output<br>6</p><hr><p>状压DP模版题</p><p>由于每行长度不超过10，可以考虑将每行的状态进行压缩。对于原地图，将山地对应二进制位置为1，平原对应置为0。摆放方案中部署炮兵的位置置为1，否则置为0。</p><p>因为同一行的炮兵间距离至少为2，故每行状态数不超过70。可先将状态及其对应炮兵数预处理出来，然后枚举可行状态即可。</p><p>转移方程： $ dp[i][j][k] = \max(dp[i][j][k], dp[i - 1][k][t] + num[j])$</p><p>所求结果为： $res = \max(dp[n][j][k])$</p><p>其中i为行数，j为当前行状态，k为i-1行状态，t为i-2行状态。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// status-&gt;状态，num-&gt;炮兵数， tot-&gt;总状态数</span></span><br><span class="line"><span class="keyword">int</span> status[<span class="number">70</span>], num[<span class="number">70</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">70</span>][<span class="number">70</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理可行状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> mx)</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mx; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; (i &lt;&lt; <span class="number">1</span>)) || (i &amp; (i &gt;&gt; <span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; (i &lt;&lt; <span class="number">2</span>)) || (i &amp; (i &gt;&gt; <span class="number">2</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        status[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = status[j];</span><br><span class="line">        <span class="keyword">for</span> (num[j] = <span class="number">0</span>; i; i &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                num[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a-&gt;地图状态</span></span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        init(<span class="number">1</span> &lt;&lt; m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 地图状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="string">'H'</span>) &#123;</span><br><span class="line">                    a[i] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">0</span>] &amp; status[i]) <span class="keyword">continue</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">0</span>] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">1</span>] &amp; status[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (status[i] &amp; status[j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[<span class="number">1</span>][i][j] = max(dp[<span class="number">1</span>][i][j], dp[<span class="number">0</span>][j][<span class="number">0</span>] + num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三行及以后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &amp; status[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; tot; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((a[i - <span class="number">1</span>] &amp; status[k]) || (status[j] &amp; status[k])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; tot; t++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a[i - <span class="number">2</span>] &amp; status[t] || (status[j] &amp; status[t]) || (status[k] &amp; status[t])) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        dp[i][j][k] = max(dp[i][j][k], dp[i - <span class="number">1</span>][k][t] + num[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                res = max(res, dp[n - <span class="number">1</span>][i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;司令部的将军们打算在N*M的网格地图上部署他们的炮兵部队。一个N*M的地图由N行M列组成，地图的每一格可能是山地（用”H” 表示），也可能是平原（用”P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://odzkskevi.qnssl.com/ba1d4fa736b99550a7ee43784c287df9?v=1535812253&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。&lt;br&gt;现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1185&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Daily" scheme="http://Semon0x29a.github.io/categories/Daily/"/>
    
    
  </entry>
  
</feed>
