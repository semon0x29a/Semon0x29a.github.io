<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Semon&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Semon0x29a.github.io/"/>
  <updated>2018-09-10T07:41:17.073Z</updated>
  <id>http://Semon0x29a.github.io/</id>
  
  <author>
    <name>Semon0x29a</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 ICPC XuZhou Online J Maze Designer</title>
    <link href="http://Semon0x29a.github.io/2018/09/10/XuZhouOnlineJ/"/>
    <id>http://Semon0x29a.github.io/2018/09/10/XuZhouOnlineJ/</id>
    <published>2018-09-10T07:19:19.000Z</published>
    <updated>2018-09-10T07:41:17.073Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nanti.jisuanke.com/t/31462" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><p>Solution:</p><pre><code>将squares看作点，相邻两个square之间连一条权值为建墙费用的边，若任意两点间只有唯一路径相连，则该图必然是一棵树， 于是求两点间最短距离即为求两结点在最大生成树上的距离。</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">8e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原图上的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">EDGE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w;</span><br><span class="line">    EDGE(<span class="keyword">int</span> uu = <span class="number">0</span>, <span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> ww = <span class="number">0</span>) : u(uu), v(vv), w(ww) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> EDGE&amp; b) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &gt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;E[maxm];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成树上的边</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, next;</span><br><span class="line">    edge(<span class="keyword">int</span> vv = <span class="number">0</span>, <span class="keyword">int</span> nxt = <span class="number">-1</span>) : v(vv), next(nxt) &#123;&#125;</span><br><span class="line">&#125;e[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> totE, tot;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], head[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn], dp[maxn][<span class="number">20</span>], maxb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    totE = tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        head[i] = <span class="number">-1</span>, dep[i] = <span class="number">0</span>, fa[i] = i;</span><br><span class="line">        <span class="built_in">memset</span>(dp[i], <span class="number">-1</span>, <span class="keyword">sizeof</span> dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEDGE</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    E[totE++] = EDGE(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    e[tot] = edge(v, head[u]); head[u] = tot++;</span><br><span class="line">    e[tot] = edge(u, head[v]); head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = find(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kruskal求最大生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(E, E + totE);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totE; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = E[i].u, v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (find(u) != find(v)) &#123;</span><br><span class="line">            fa[fa[v]] = fa[u];</span><br><span class="line">            addedge(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倍增法求LCA</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span> </span>&#123;</span><br><span class="line">    dp[u][<span class="number">0</span>] = pre;</span><br><span class="line">    dep[u] = dep[pre] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = e[i].next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e[i].v != pre) &#123;</span><br><span class="line">            DFS(e[i].v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makedp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (maxb = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; maxb) &lt;= n; ++maxb);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; maxb; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (~dp[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[dp[i][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123;</span><br><span class="line">        swap(u, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = maxb - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[dp[u][j]] &gt;= dep[v]) &#123;</span><br><span class="line">            u = dp[u][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = maxb - <span class="number">1</span>; ~j; --j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[u][j] != dp[v][j]) &#123;</span><br><span class="line">            u = dp[u][j], v = dp[v][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n1, m; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n1, &amp;m);</span><br><span class="line">    n = n1 * m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">3</span>]; <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'D'</span> &amp;&amp; i + n1 &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + n1, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; i + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'D'</span> &amp;&amp; i + n1 &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + n1, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'R'</span> &amp;&amp; i + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">            addEDGE(i, i + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    kruskal();</span><br><span class="line"></span><br><span class="line">    dep[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    DFS(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    makedp();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p1, p2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;p1.first, &amp;p1.second, &amp;p2.first, &amp;p2.second);</span><br><span class="line">        <span class="keyword">int</span> u = (p1.first - <span class="number">1</span>) * m + p1.second, v = (p2.first - <span class="number">1</span>) * m + p2.second;</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lca = LCA(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dep[u] + dep[v] - <span class="number">2</span> * dep[lca]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/31462&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HDU-3652 B-number</title>
    <link href="http://Semon0x29a.github.io/2018/09/07/HDU-3652/"/>
    <id>http://Semon0x29a.github.io/2018/09/07/HDU-3652/</id>
    <published>2018-09-07T14:23:43.000Z</published>
    <updated>2018-09-08T02:58:49.527Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3652" target="_blank" rel="noopener">题目链接</a></p><blockquote class="blockquote-center"><p> <strong>B-number</strong><br>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 8748    Accepted Submission(s): 5196 </p></blockquote><p><strong>Problem Description</strong><br>A wqb-number, or B-number for short, is a non-negative integer whose decimal form<br>contains the sub- string “13” and can be divided by 13. For example, 130 and 2613<br>are wqb-numbers, but 143 and 2639 are not. Your task is to calculate how many<br>wqb-numbers from 1 to n for a given integer n.</p><a id="more"></a><p><strong>Input</strong><br>Process till EOF. In each line, there is one positive integer n(1 &lt;= n &lt;= 1000000000).</p><p><strong>Output</strong><br>Print each answer in a single line.</p><p><strong>Sample Input</strong></p><pre><code>131002001000</code></pre><p><strong>Sample Output</strong></p><pre><code>1122</code></pre><p>题意： 求[1, n]中包含字段“13”且被13整除的数的个数</p><p>数位DP， 用pre代表前置状态， pre为0时表示前面没有“13”且前一数位不为1， pre为1时表示前面没有“13”且<br>前一位为1， pre为2时表示前面已有“13”。<br>若当前pre为2，则后续pre均为2。<br>若当前pre为1且当前数位为3， 则下一数位pre为2。<br>若当前pre为0或1且当前数位为1， 则下一数位pre为1<br>其余条件pre为0。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bit[<span class="number">20</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">20</span>][<span class="number">3</span>][<span class="number">13</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">bool</span> limits, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == tot) &#123;</span><br><span class="line">        <span class="keyword">return</span> (mod == <span class="number">0</span>) &amp;&amp; (pre == <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limits &amp;&amp; dp[u][pre][mod] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[u][pre][mod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> top = limits ? bit[u] : <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= top; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="number">0</span>) &#123;</span><br><span class="line">            res += dfs(u + <span class="number">1</span>, i == <span class="number">1</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">                res += dfs(u + <span class="number">1</span>, <span class="number">2</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res += dfs(u + <span class="number">1</span>, i == <span class="number">1</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res += dfs(u + <span class="number">1</span>, <span class="number">2</span>, limits &amp;&amp; (i == top), (mod * <span class="number">10</span> + i) % <span class="number">13</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!limits) dp[u][pre][mod] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        bit[tot++] = n % <span class="number">10</span>;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(bit, bit + tot);</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3652&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt; &lt;strong&gt;B-number&lt;/strong&gt;&lt;br&gt;Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)&lt;br&gt;Total Submission(s): 8748    Accepted Submission(s): 5196 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Problem Description&lt;/strong&gt;&lt;br&gt;A wqb-number, or B-number for short, is a non-negative integer whose decimal form&lt;br&gt;contains the sub- string “13” and can be divided by 13. For example, 130 and 2613&lt;br&gt;are wqb-numbers, but 143 and 2639 are not. Your task is to calculate how many&lt;br&gt;wqb-numbers from 1 to n for a given integer n.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>POJ-1185 炮兵阵地</title>
    <link href="http://Semon0x29a.github.io/2018/09/07/poj-1185/"/>
    <id>http://Semon0x29a.github.io/2018/09/07/poj-1185/</id>
    <published>2018-09-07T09:56:54.000Z</published>
    <updated>2018-09-07T14:21:16.928Z</updated>
    
    <content type="html"><![CDATA[<p>司令部的将军们打算在N*M的网格地图上部署他们的炮兵部队。一个N*M的地图由N行M列组成，地图的每一格可能是山地（用”H” 表示），也可能是平原（用”P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：</p><p><img src="https://odzkskevi.qnssl.com/ba1d4fa736b99550a7ee43784c287df9?v=1535812253" alt=""></p><p>如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。<br>现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。</p><p><a href="http://poj.org/problem?id=1185" target="_blank" rel="noopener">题目链接</a></p><a id="more"></a><p>Input<br>第一行包含两个由空格分割开的正整数，分别表示N和M；<br>接下来的N行，每一行含有连续的M个字符(‘P’或者’H’)，中间没有空格。按顺序表示地图中每一行的数据。N &lt;= 100；M &lt;= 10。</p><p>Output<br>仅一行，包含一个整数K，表示最多能摆放的炮兵部队的数量。</p><p>Sample Input<br>5 4<br>PHPP<br>PPHH<br>PPPP<br>PHPP<br>PHHP</p><p>Sample Output<br>6</p><hr><p>状压DP模版题</p><p>由于每行长度不超过10，可以考虑将每行的状态进行压缩。对于原地图，将山地对应二进制位置为1，平原对应置为0。摆放方案中部署炮兵的位置置为1，否则置为0。</p><p>因为同一行的炮兵间距离至少为2，故每行状态数不超过70。可先将状态及其对应炮兵数预处理出来，然后枚举可行状态即可。</p><p>转移方程： $ dp[i][j][k] = \max(dp[i][j][k], dp[i - 1][k][t] + num[j])$</p><p>所求结果为： $res = \max(dp[n][j][k])$</p><p>其中i为行数，j为当前行状态，k为i-1行状态，t为i-2行状态。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// status-&gt;状态，num-&gt;炮兵数， tot-&gt;总状态数</span></span><br><span class="line"><span class="keyword">int</span> status[<span class="number">70</span>], num[<span class="number">70</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">70</span>][<span class="number">70</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理可行状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> mx)</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mx; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; (i &lt;&lt; <span class="number">1</span>)) || (i &amp; (i &gt;&gt; <span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> ((i &amp; (i &lt;&lt; <span class="number">2</span>)) || (i &amp; (i &gt;&gt; <span class="number">2</span>))) <span class="keyword">continue</span>;</span><br><span class="line">        status[tot++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = status[j];</span><br><span class="line">        <span class="keyword">for</span> (num[j] = <span class="number">0</span>; i; i &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                num[j]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a-&gt;地图状态</span></span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) == <span class="number">2</span>) &#123;</span><br><span class="line">        init(<span class="number">1</span> &lt;&lt; m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 地图状态</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">            a[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="string">'H'</span>) &#123;</span><br><span class="line">                    a[i] |= <span class="number">1</span> &lt;&lt; j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">0</span>] &amp; status[i]) <span class="keyword">continue</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i][<span class="number">0</span>] = num[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[<span class="number">1</span>] &amp; status[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (status[i] &amp; status[j]) <span class="keyword">continue</span>;</span><br><span class="line">                dp[<span class="number">1</span>][i][j] = max(dp[<span class="number">1</span>][i][j], dp[<span class="number">0</span>][j][<span class="number">0</span>] + num[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第三行及以后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] &amp; status[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; tot; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((a[i - <span class="number">1</span>] &amp; status[k]) || (status[j] &amp; status[k])) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; tot; t++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (a[i - <span class="number">2</span>] &amp; status[t] || (status[j] &amp; status[t]) || (status[k] &amp; status[t])) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        dp[i][j][k] = max(dp[i][j][k], dp[i - <span class="number">1</span>][k][t] + num[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tot; j++) &#123;</span><br><span class="line">                res = max(res, dp[n - <span class="number">1</span>][i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;司令部的将军们打算在N*M的网格地图上部署他们的炮兵部队。一个N*M的地图由N行M列组成，地图的每一格可能是山地（用”H” 表示），也可能是平原（用”P”表示），如下图。在每一格平原地形上最多可以布置一支炮兵部队（山地上不能够部署炮兵部队）；一支炮兵部队在地图上的攻击范围如图中黑色区域所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://odzkskevi.qnssl.com/ba1d4fa736b99550a7ee43784c287df9?v=1535812253&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果在地图中的灰色所标识的平原上部署一支炮兵部队，则图中的黑色的网格表示它能够攻击到的区域：沿横向左右各两格，沿纵向上下各两格。图上其它白色网格均攻击不到。从图上可见炮兵的攻击范围不受地形的影响。&lt;br&gt;现在，将军们规划如何部署炮兵部队，在防止误伤的前提下（保证任何两支炮兵部队之间不能互相攻击，即任何一支炮兵部队都不在其他支炮兵部队的攻击范围内），在整个地图区域内最多能够摆放多少我军的炮兵部队。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1185&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello_world!</title>
    <link href="http://Semon0x29a.github.io/2018/09/06/Hello-world/"/>
    <id>http://Semon0x29a.github.io/2018/09/06/Hello-world/</id>
    <published>2018-09-06T05:13:38.000Z</published>
    <updated>2018-09-06T07:17:18.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试一下新玩具"><a href="#测试一下新玩具" class="headerlink" title="测试一下新玩具"></a>测试一下新玩具</h1><p>Test Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello, world!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test latex:</p><p>$$ \sum_{i = 1}^{n} a^{i - 1} $$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试一下新玩具&quot;&gt;&lt;a href=&quot;#测试一下新玩具&quot; class=&quot;headerlink&quot; title=&quot;测试一下新玩具&quot;&gt;&lt;/a&gt;测试一下新玩具&lt;/h1&gt;&lt;p&gt;Test Code:&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
  </entry>
  
</feed>
